<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/12/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>cpps的特性</title>
    <url>/2024/02/10/cpp%E7%9A%84%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="attribute"><a href="#attribute" class="headerlink" title="attribute"></a><strong>attribute</strong></h2><p><strong>attribute__的基本语法是在声明的末尾添加__attribute</strong>((属性名))，其中“属性名”可以是一个或多个指定给编译器的属性，属性之间用逗号分隔。<br>eg:<br>unused：告诉编译器某个变量或函数可能未被使用，以避免编译时出现未使用警告。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static __attribute__((unused))</span><br><span class="line">int ioctl(int fd, unsigned long req, void *value)</span><br><span class="line">&#123;</span><br><span class="line">	int ret = sys_ioctl(fd, req, value);</span><br><span class="line"></span><br><span class="line">	if (ret &lt; 0) &#123;</span><br><span class="line">		SET_ERRNO(-ret);</span><br><span class="line">		ret = -1;</span><br><span class="line">	&#125;</span><br><span class="line">	return ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>noinline：阻止编译器内联某个函数，即使开启了优化。<br>void my_function(void) <strong>attribute</strong>((noinline));</p>
<p>pure：指示函数是“纯”的，即函数的返回值仅依赖于输入参数且没有副作用，这允许编译器进行更多的优化。</p>
<p>aligned(x)：强制变量或类型实例按照x字节对齐。</p>
<p>constructor 和 destructor：分别指示函数应在main函数执行前和执行后调用。</p>
<h2 id="virtual"><a href="#virtual" class="headerlink" title="virtual"></a>virtual</h2><p>在C++中，virtual uintptr_t initUTM(size_t size);声明了一个虚拟成员函数initUTM，这个函数预期在一个类中被声明，并且可能在派生类中被重写。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">class Base &#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void print() &#123;</span><br><span class="line">        std::cout &lt;&lt; &quot;Base class print function&quot; &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">class Derived : public Base &#123;</span><br><span class="line">public:</span><br><span class="line">    void print() override &#123;  // 使用override确保重写</span><br><span class="line">        std::cout &lt;&lt; &quot;Derived class print function&quot; &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">int main() &#123;</span><br><span class="line">    Base* b = new Derived();</span><br><span class="line">    b-&gt;print();  // 输出：Derived class print function</span><br><span class="line">    </span><br><span class="line">    delete b;  // 清理资源</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言的常用函数</title>
    <url>/2024/02/05/c%E8%AF%AD%E8%A8%80%E7%9A%84%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="1-getopt-long"><a href="#1-getopt-long" class="headerlink" title="1.getopt_long"></a>1.getopt_long</h2><h4 id="函数定义："><a href="#函数定义：" class="headerlink" title="函数定义："></a>函数定义：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;getopt.h&gt;</span><br><span class="line">int getopt_long(int argc, char *argv[],</span><br><span class="line">		  const char *optstring,</span><br><span class="line">		  const struct option *longopts, int *longindex);</span><br></pre></td></tr></table></figure>
<p>函数是用于解析命令行参数的，与函数 getopt() 函数是相似的，它可以处理长选项，即两个短杠”–” 连接的参数选项。而且比 getopt() 多两个参数。</p>
<h4 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h4><p>1，argc        一般就是 main 函数里的 argc<br>2，argv    同上<br>3，optstring  要匹配的参数，如：”ha” 或  “h:a” 或 “h:a::”，带一个冒号的表示此选项须带参数，两个冒号的表示是可选参数<br>4，longopts 这个是长选项结构的指针，一般传的是数组<br>5，longindex  如果不为空，它将指向 longopts 的一个元素的位置，即longopts的数组下标</p>
<h4 id="man手册例子："><a href="#man手册例子：" class="headerlink" title="man手册例子："></a>man手册例子：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;getopt.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;     /* for printf */</span><br><span class="line">#include &lt;stdlib.h&gt;    /* for exit */</span><br><span class="line"> </span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">	int c;</span><br><span class="line">	int digit_optind = 0;</span><br><span class="line"> </span><br><span class="line">	while (1) &#123;</span><br><span class="line">		int this_option_optind = optind ? optind : 1;</span><br><span class="line">		int option_index = 0;</span><br><span class="line">		</span><br><span class="line">		/*长选项的匹配只要匹配到前n个字符相同就会返回，若是模棱两可时会返回？，同时stderr会有相应打印*/</span><br><span class="line">		static struct option long_options[] = &#123;</span><br><span class="line">		   &#123;&quot;add&quot;,     required_argument, 0,  0 &#125;,</span><br><span class="line">		   &#123;&quot;append&quot;,  no_argument,       0,  0 &#125;,</span><br><span class="line">		   &#123;&quot;delete&quot;,  required_argument, 0,  0 &#125;,</span><br><span class="line">		   &#123;&quot;verbose&quot;, no_argument,       0,  0 &#125;,</span><br><span class="line">		   &#123;&quot;create&quot;,  required_argument, 0, &#x27;c&#x27;&#125;,</span><br><span class="line">		   &#123;&quot;file&quot;,    required_argument, 0,  0 &#125;,</span><br><span class="line">		   &#123;0,         0,                 0,  0 &#125;</span><br><span class="line">	   &#125;;</span><br><span class="line">		</span><br><span class="line">		/*短选项跟一个冒号表示有选项参数，两个冒号表示选项参数可选*/</span><br><span class="line">	   c = getopt_long(argc, argv, &quot;abc:d:012&quot;,</span><br><span class="line">					   long_options, &amp;option_index);</span><br><span class="line">	   if (c == -1)</span><br><span class="line">		   break;</span><br><span class="line"> </span><br><span class="line">	   switch (c) &#123;</span><br><span class="line">	   case 0: /* 匹配到长选项时，返回的val，即struct optaion 中的 val，这里为 0 则表示匹配到 add、append, delete, verbose, file时都会跟到这个 case, 而create 则匹配到字符&#x27;c&#x27;*/</span><br><span class="line">			printf(&quot;get option_index = %d, option %s&quot;, option_index, long_options[option_index].name);</span><br><span class="line">			if (optarg)</span><br><span class="line">			   printf(&quot; with arg %s&quot;, optarg);</span><br><span class="line">			printf(&quot;\n&quot;);</span><br><span class="line">			break;</span><br><span class="line"> </span><br><span class="line">	   case &#x27;0&#x27;:</span><br><span class="line">	   case &#x27;1&#x27;:</span><br><span class="line">	   case &#x27;2&#x27;:</span><br><span class="line">			if (digit_optind != 0 &amp;&amp; digit_optind != this_option_optind)</span><br><span class="line">			 printf(&quot;digits occur in two different argv-elements.\n&quot;);</span><br><span class="line">			digit_optind = this_option_optind;</span><br><span class="line">			printf(&quot;option %c\n&quot;, c);</span><br><span class="line">			break;</span><br><span class="line"> </span><br><span class="line">	   case &#x27;a&#x27;:</span><br><span class="line">			printf(&quot;option a\n&quot;);</span><br><span class="line">			break;</span><br><span class="line"> </span><br><span class="line">	   case &#x27;b&#x27;:</span><br><span class="line">			printf(&quot;option b\n&quot;);</span><br><span class="line">			break;</span><br><span class="line"> </span><br><span class="line">	   case &#x27;c&#x27;:</span><br><span class="line">			printf(&quot;option c with value &#x27;%s&#x27;\n&quot;, optarg);</span><br><span class="line">			break;</span><br><span class="line"> </span><br><span class="line">	   case &#x27;d&#x27;:</span><br><span class="line">			printf(&quot;option d with value &#x27;%s&#x27;\n&quot;, optarg);</span><br><span class="line">			break;</span><br><span class="line"> </span><br><span class="line">	   case &#x27;?&#x27;: /*ambiguous 模棱两可的时候返回? 如只输入 --a 则会匹配到 add 和 append*/</span><br><span class="line">			printf(&quot;it&#x27;s ambiguous, please selete one\n&quot;);</span><br><span class="line">			break;</span><br><span class="line">		</span><br><span class="line">	   default:</span><br><span class="line">			printf(&quot;?? getopt returned character code 0%o ??\n&quot;, c);</span><br><span class="line">	   &#125;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	if (optind &lt; argc) &#123;</span><br><span class="line">		printf(&quot;non-option ARGV-elements: &quot;);</span><br><span class="line">		while (optind &lt; argc)</span><br><span class="line">		   printf(&quot;%s &quot;, argv[optind++]);</span><br><span class="line">		printf(&quot;\n&quot;);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	exit(EXIT_SUCCESS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="fread和fwrite"><a href="#fread和fwrite" class="headerlink" title="fread和fwrite"></a>fread和fwrite</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">size_t fread(void *ptr, size_t size, size_t count, FILE *stream);</span><br></pre></td></tr></table></figure>
<pre><code>ptr：指向读取数据存储的缓冲区。
size：每个数据项的字节数。
count：要读取的数据项数。
stream：文件指针，指向要读取数据的文件。
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">size_t fwrite(const void *ptr, size_t size, size_t count, FILE *stream);</span><br></pre></td></tr></table></figure>

<pre><code>ptr：要写入的数据的指针。
size：每个数据项的字节数。
count：要写入的数据项的个数。
stream：要写入的文件指针。
</code></pre>
<h2 id="sscanf"><a href="#sscanf" class="headerlink" title="sscanf"></a>sscanf</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int sscanf(const char* str, const char* format, ...);</span><br></pre></td></tr></table></figure>
<p>从<strong>字符串</strong>中按照指定的格式解析数据</p>
<pre><code>str：要解析的输入字符串。
format：格式字符串，指定了要匹配的格式规则。
...：可变参数列表，用于接收解析后的数据。
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char str[20];</span><br><span class="line">sscanf(&quot;Hello, World!&quot;, &quot;%s&quot;, str);//解析字符串，把Hello, World!存到str</span><br></pre></td></tr></table></figure>

<h2 id="命令处理"><a href="#命令处理" class="headerlink" title="命令处理"></a>命令处理</h2><h4 id="strtok-r"><a href="#strtok-r" class="headerlink" title="strtok_r"></a>strtok_r</h4><p>首先需要将字符串切分为指令和参数形式，需要用到strtok_r函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char *strtok_r(char * __restrict__ _Str, const char * __restrict__ _Delim, char ** __restrict__ __last);</span><br><span class="line">SS</span><br><span class="line">char *cmd;//表示命令</span><br><span class="line">char *paras;//表示命令后的参数</span><br><span class="line"> </span><br><span class="line">cmd = strtok_r(str, &quot;,&quot;, &amp;paras);</span><br><span class="line">printf(&quot;cmd:%srn&quot;, cmd);//获得字符串的第一串字符cmd:led</span><br><span class="line">printf(&quot;paras:%srn&quot;, paras);//获取后续字符串paras:100,0,80,15</span><br></pre></td></tr></table></figure>

<h4 id="strstr"><a href="#strstr" class="headerlink" title="strstr"></a>strstr</h4><p>对于得到参数指令字符串，我们可能还需要判断该指令是否有效，即计算机之前是否存储了该字符串，可以通过字符串匹配数组中对应字符串的方式来模拟这个测试。需要用到strstr函数，其函数定义为：<br>我们可以先自定义一个用来查询的字符串数组funname[5]，然后依次进行匹配比较。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    char *funname[5] = &#123;&quot;music&quot;, &quot;play&quot;, &quot;A_led1&quot;, &quot;led2&quot;, &quot;led&quot;&#125;;//自定义的函数名称列表</span><br><span class="line">     </span><br><span class="line">char *ret;</span><br><span class="line">int i;</span><br><span class="line">for (i = 0; i &lt; 5;i++)</span><br><span class="line">&#123;</span><br><span class="line">	ret = strstr(funname[i], cmd);</span><br><span class="line">	if(ret!=NULL)</span><br><span class="line">	&#123;</span><br><span class="line">		printf(&quot;find cmd in funname[%d]rn&quot;, i);</span><br><span class="line">		printf(&quot;ret:%srn&quot;, ret);</span><br><span class="line">		break;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(i==5)</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;can&#x27;t find cmd in funname[]&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试结果：</p>
<pre><code>find cmd in funname[2]
ret:led1
</code></pre>
<h4 id="strtok"><a href="#strtok" class="headerlink" title="strtok"></a>strtok</h4><p>确定了指令字符串的有效性，接下来就要切分后面的参数了，实际上我们还可以继续使用strtok_r方法，不过，我们可以使用另一个类似的函数strtok，它少一个用来保存切分后字符串的参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">char* para[4];</span><br><span class="line">para[0] = strtok(paras, &quot;,&quot;);</span><br><span class="line">int j= 1;</span><br><span class="line">while(paras != NULL)</span><br><span class="line">&#123;</span><br><span class="line">    para[j++] = strtok(NULL, &quot;,&quot;);</span><br><span class="line">    if(j==4)</span><br><span class="line">        break;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;para[0]:%srn&quot;, para[0]);</span><br><span class="line">printf(&quot;para[1]:%srn&quot;, para[1]);</span><br><span class="line">printf(&quot;para[2]:%srn&quot;, para[2]);</span><br><span class="line">printf(&quot;para[3]:%srn&quot;, para[3]);</span><br></pre></td></tr></table></figure>
<pre><code>第一次切割时，第一个参数（也就是str）不能是NULL
第一次切割时，函数将找到str中第一个分割符，将它替换为\0
同时strtok函数将保存这 个\0在整个字符串中的位置。

第二次、第三次...第n次使用strtok函数切割同一个字符串时。
第一个参数为NULL
此时函数将从上一个保存的\0的位置开始往后切割，直到遇到下一个分割符或\0
</code></pre>
<h4 id="atoi"><a href="#atoi" class="headerlink" title="atoi"></a>atoi</h4><p>上面分离的参数数字是字符串型，实际使用时可能需要其对应的整数形式，我们可以使用atoi函数进行转换:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int atoi(const char *_Str);</span><br></pre></td></tr></table></figure>
<pre><code>参数：数字形式的字符串
返回值：对应的整形数值，若不能转换，返回0
</code></pre>
<h2 id="strcmp-str1-str2"><a href="#strcmp-str1-str2" class="headerlink" title="strcmp(str1,str2)"></a>strcmp(str1,str2)</h2><p>若str1&#x3D;str2，则返回0<br>strcmp()函数首先将str1字符串的第一个字符的ACSII值减去str2第一个字符的ACSII值(自左向右逐个字符相比，直到出现不同的字符或遇’\0’为止)<br>若差值为零则继续比较下去；若差值不为零，则返回差值。</p>
<h2 id="struct-enum-union"><a href="#struct-enum-union" class="headerlink" title="struct,enum,union"></a>struct,enum,union</h2><p><a href="https://blog.csdn.net/qq_60192898/article/details/127602638">https://blog.csdn.net/qq_60192898/article/details/127602638</a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>linux的常用命令</title>
    <url>/2024/02/02/linux%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="Linux根目录"><a href="#Linux根目录" class="headerlink" title="Linux根目录"></a>Linux根目录</h2><p>Linux根目录(<code>/</code>)是文件系统的最顶层目录，它包含了系统的所有其他文件和目录。每个位于根目录下的目录都有其特定的用途和约定。以下是Linux根目录下常见目录的简要说明：</p>
<h3 id="bin"><a href="#bin" class="headerlink" title="/bin"></a><code>/bin</code></h3><p>包含用户和系统操作所需的重要可执行文件（命令），如<code>ls</code>、<code>cp</code>等。这些命令对于系统的基本功能至关重要。</p>
<h3 id="boot"><a href="#boot" class="headerlink" title="/boot"></a><code>/boot</code></h3><p>存放启动Linux系统时使用的文件，包括Linux内核文件（通常是<code>vmlinuz</code>）、引导加载程序（如GRUB）的配置文件以及初始化RAM磁盘（initrd）。</p>
<h3 id="dev"><a href="#dev" class="headerlink" title="/dev"></a><code>/dev</code></h3><p>包含设备文件，这些文件代表系统中的硬件设备，允许程序和脚本与这些设备进行交互，如硬盘（<code>/dev/sda</code>）、终端（<code>/dev/tty</code>）等。</p>
<h3 id="etc"><a href="#etc" class="headerlink" title="/etc"></a><code>/etc</code></h3><p>存放系统全局配置文件，如启动脚本、网络配置文件以及各种服务和程序的配置文件。</p>
<h3 id="home"><a href="#home" class="headerlink" title="/home"></a><code>/home</code></h3><p>用户的主目录，通常每个用户在<code>/home</code>下有一个与其用户名同名的目录，用于存放个人文件、配置文件等。</p>
<h3 id="lib"><a href="#lib" class="headerlink" title="/lib"></a><code>/lib</code></h3><p>包含系统和应用程序运行所需的共享库文件和内核模块。共享库类似于Windows中的DLL文件。</p>
<h3 id="media和-mnt"><a href="#media和-mnt" class="headerlink" title="/media和/mnt"></a><code>/media</code>和<code>/mnt</code></h3><p><code>/media</code>通常用于挂载可移除媒体，如CD-ROMs、USB驱动器等，而<code>/mnt</code>经常被用作临时挂载文件系统的点。</p>
<h3 id="opt"><a href="#opt" class="headerlink" title="/opt"></a><code>/opt</code></h3><p>用于安装“可选”的软件和第三方应用程序，这些应用程序通常以包的形式独立于系统默认的软件管理。</p>
<h3 id="proc"><a href="#proc" class="headerlink" title="/proc"></a><code>/proc</code></h3><p>一个虚拟的文件系统，提供对内核和进程信息的接口，如系统内存、配置参数（通过文件系统接口访问）。</p>
<h3 id="root"><a href="#root" class="headerlink" title="/root"></a><code>/root</code></h3><p>超级用户（root用户）的主目录，类似于普通用户的<code>/home/用户名</code>目录，但位于根目录下。</p>
<h3 id="sbin"><a href="#sbin" class="headerlink" title="/sbin"></a><code>/sbin</code></h3><p>包含系统管理和维护的重要可执行文件，通常只有root用户才能运行这些命令，如<code>fdisk</code>、<code>ifconfig</code>等。</p>
<h3 id="srv"><a href="#srv" class="headerlink" title="/srv"></a><code>/srv</code></h3><p>用于存放一些服务启动之后需要的数据，这些服务直接提供给系统外部使用。</p>
<h3 id="sys"><a href="#sys" class="headerlink" title="/sys"></a><code>/sys</code></h3><p>像<code>/proc</code>一样，<code>/sys</code>也是一个虚拟的文件系统，提供了内核对象的接口，它允许内核和用户空间通信，以及配置内核。</p>
<h3 id="tmp"><a href="#tmp" class="headerlink" title="/tmp"></a><code>/tmp</code></h3><p>用于存放临时文件，任何用户都可以在此目录下创建和删除文件。系统可能在重启时清除此目录下的文件。</p>
<h3 id="usr"><a href="#usr" class="headerlink" title="/usr"></a><code>/usr</code></h3><p>包含用户级别的应用程序和文件，<code>/usr</code>目录下包含了许多子目录，如<code>/usr/bin</code>、<code>/usr/lib</code>、<code>/usr/local</code>等，用于存放非必需的应用程序、库文件、文档等。</p>
<h3 id="var"><a href="#var" class="headerlink" title="/var"></a><code>/var</code></h3><p>用于存放经常变化的文件，如日志文件（<code>/var/log</code>）、包和数据库文件（<code>/var/lib</code>）、临时电子邮件文件（<code>/var/mail</code>）等。</p>
<p>这些目录构成了Linux文件系统的标准布局，不同的发行版可能会有轻微的变化或扩展。</p>
<h2 id="重启网络（显示wifi图标）"><a href="#重启网络（显示wifi图标）" class="headerlink" title="重启网络（显示wifi图标）"></a>重启网络（显示wifi图标）</h2><p>$ sudo nmcli network off<br>$ sudo nmcli network on</p>
<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p>查找特定名称的文件：<br>$ find &#x2F;path&#x2F;to&#x2F;search -name “filename.txt”<br>文件：<br>-type f<br>30天内被修改过<br>-mtime -30<br>处理深度：<br>可以通过-maxdepth和-mindepth选项控制搜索的深度。</p>
<h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><p>在文件中搜索文本：<br>$ grep “search pattern” filename</p>
<p>递归搜索目录中的所有文件：<br>$ grep -r “search pattern” &#x2F;path&#x2F;to&#x2F;search<br>忽略大小写地搜索文本:<br>-i<br>显示匹配行的行号：<br>-n</p>
<h2 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h2><p>-exec后面跟着要执行的命令，然后是{}，它代表当前处理的文件名，最后以;结束</p>
<p>查找名为config.php的文件，并使用chmod命令更改它们的权限：<br>$ find &#x2F;path&#x2F;to&#x2F;search -type f -name “config.php” -exec chmod 644 {} ;</p>
<p>使用;来终结-exec命令是必须的，因为没有它，find命令就不知道-exec选项的参数在哪里结束。</p>
<h2 id=""><a href="#" class="headerlink" title="|"></a>|</h2><p>管道（|）是一个Shell特性，它允许你将一个命令的输出作为另一个命令的输入。与-exec不同，管道通常与xargs命令一起使用，xargs可以将标准输入（stdin）转换为命令行参数。</p>
<p>查找当前目录及子目录下所有.log文件，并使用grep命令在它们中搜索”error”字符串：<br>$ find . -type f -name “*.log” | xargs grep “error”</p>
<p>性能：使用-exec时，find会为每个找到的文件启动一个新的进程来执行指定的命令。而管道到xargs的方式会尝试减少进程的数量，通过将多个文件名作为单个命令的参数来提高效率。<br>安全性：-exec直接由find处理，可以安全地处理文件名中的特殊字符。而使用管道到xargs时，如果不加-0选项（并且find使用-print0），可能会遇到文件名中包含空格、换行符等特殊字符的问题。<br>灵活性：管道允许你利用Shell的特性组合多个命令，可以实现更复杂的处理流程。<br>选择使用-exec还是管道（配合xargs），取决于具体的任务需求、对性能的考量以及对特殊文件名的处理需求。</p>
<h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>查看所有Git配置项：<br>$ git config –list<br>user.name&#x3D;LuLuji04<br>user.email&#x3D;<a href="mailto:&#108;&#x69;&#117;&#x79;&#117;&#106;&#105;&#48;&#49;&#48;&#x40;&#49;&#x32;&#54;&#46;&#99;&#111;&#x6d;">&#108;&#x69;&#117;&#x79;&#117;&#106;&#105;&#48;&#49;&#48;&#x40;&#49;&#x32;&#54;&#46;&#99;&#111;&#x6d;</a><br>https.proxy&#x3D;192.168.3.11:7890<br>credential.helper&#x3D;store<br>http.proxy&#x3D;192.168.3.11:7890<br>core.editor&#x3D;vim<br>color.ui&#x3D;true</p>
<p>查看特定配置项的值，如user.name：<br>$ git config user.name</p>
<p>$ git config –global user.name “Your Name”<br>$ git config –global user.email “<a href="mailto:&#x79;&#x6f;&#117;&#114;&#x65;&#109;&#x61;&#x69;&#108;&#x40;&#101;&#120;&#x61;&#x6d;&#x70;&#108;&#101;&#46;&#99;&#x6f;&#109;">&#x79;&#x6f;&#117;&#114;&#x65;&#109;&#x61;&#x69;&#108;&#x40;&#101;&#120;&#x61;&#x6d;&#x70;&#108;&#101;&#46;&#99;&#x6f;&#109;</a>“</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>riscv的学习</title>
    <url>/2023/12/07/riscv%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>RISC-V是由伯克利大学开发的一款开源架构，作为对课内的补充，在此记录学习过程</p>
<span id="more"></span>
<h2 id="1-完结-循序渐进，学习开发一个RISC-V上的操作系统-汪辰-2021春"><a href="#1-完结-循序渐进，学习开发一个RISC-V上的操作系统-汪辰-2021春" class="headerlink" title="1.[完结] 循序渐进，学习开发一个RISC-V上的操作系统 - 汪辰 - 2021春"></a>1.[完结] 循序渐进，学习开发一个RISC-V上的操作系统 - 汪辰 - 2021春</h2><iframe src="//player.bilibili.com/player.html?aid=459886905&bvid=BV1Q5411w7z5&cid=319792271&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>

<h2 id="2-笔记"><a href="#2-笔记" class="headerlink" title="2.笔记"></a>2.笔记</h2><h4 id="安全中断（riscv架构）"><a href="#安全中断（riscv架构）" class="headerlink" title="安全中断（riscv架构）"></a>安全中断（riscv架构）</h4><p><a href="https://zhuanlan.zhihu.com/p/669734854">https://zhuanlan.zhihu.com/p/669734854</a></p>
<h4 id="安全相关论文"><a href="#安全相关论文" class="headerlink" title="安全相关论文"></a>安全相关论文</h4><p><a href="https://s.wanfangdata.com.cn/patent?q=%E5%8F%91%E6%98%8E%E4%BA%BA/%E8%AE%BE%E8%AE%A1%E4%BA%BA:%22%E5%A4%8F%E8%99%9E%E6%96%8C%22&p=1">https://s.wanfangdata.com.cn/patent?q=%E5%8F%91%E6%98%8E%E4%BA%BA%2F%E8%AE%BE%E8%AE%A1%E4%BA%BA%3A%22%E5%A4%8F%E8%99%9E%E6%96%8C%22&amp;p=1</a></p>
<h4 id="标准扩展"><a href="#标准扩展" class="headerlink" title="标准扩展"></a>标准扩展</h4><p>RISC-V指令集架构（ISA）是模块化的，由基础整数指令集（如RV32I、RV64I）和一系列可选的扩展组成。这些扩展使得RISC-V能够灵活地适应不同的应用需求，从简单的嵌入式设备到复杂的服务器系统。截至我最后更新的信息（2023年4月），以下是RISC-V常见的一些扩展：</p>
<p>标准扩展<br>M - 整数乘法和除法扩展，为整数算术提供乘法、除法和取模运算指令。<br>A - 原子指令扩展，支持原子内存访问操作，用于构建多线程和并发程序。<br>F - 单精度浮点扩展，提供32位单精度浮点运算指令。<br>D - 双精度浮点扩展，提供64位双精度浮点运算指令。<br>C - 压缩指令扩展，提供更短的指令格式，以减小代码大小和提高性能。<br>G - 通用扩展，一个便捷的缩写，包含了I、M、A、F、D和C扩展，适用于需要通用计算能力的应用。<br>Q - 四精度浮点扩展，提供128位四精度浮点运算指令。<br>L - 十进制浮点扩展，提供十进制浮点运算指令。<br>B - 位操作扩展，提供位操作和位字段操作指令，用于提高位操作的效率。<br>J - 动态跳转扩展，提供更灵活的跳转和分支指令。<br>T - 事务内存扩展，提供硬件事务内存支持，用于改进并发程序的性能和简化并发控制。<br>P - DSP扩展，提供数字信号处理（DSP）相关指令，优化多媒体处理等应用。<br>V - 向量扩展，为数据并行计算提供支持，通过向量操作指令优化大规模数据处理性能。<br>特殊扩展<br>Z系列扩展，为特定的功能或用途定义的细粒度扩展。例如：<br>Zifencei - 指令流水线栅栏指令扩展，用于同步指令和数据流水线。<br>Zmmul - 仅包含乘法指令的整数乘法扩展子集。<br>Zicsr - 控制和状态寄存器（CSR）指令扩展，为访问CSR提供指令。<br>注意</p>
<p>eg<br>COMMON_CFLAGS +&#x3D; -march&#x3D;rv32im -mabi&#x3D;ilp32   # overwrite<br>这样的设置指示编译器生成适用于具有整数、乘法和除法指令集的RISC-V 32位架构的代码，使用ilp32ABI，其中整数、长整型和指针都是32位的。</p>
<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><h6 id="riscv64-linux-gnu-gcc-g"><a href="#riscv64-linux-gnu-gcc-g" class="headerlink" title="riscv64-linux-gnu-gcc&#x2F;-g++"></a>riscv64-linux-gnu-gcc&#x2F;-g++</h6><p>目标环境：它生成的代码是为了在支持Linux的RISC-V 64位系统上运行。<br>命名解释：<br>linux-gnu：表示目标操作系统是Linux，使用GNU的libc（glibc）。<br>适用场景：开发Linux应用程序或者在RISC-V 64位Linux系统上运行的任何软件。<br>Installation (glib)<br>.&#x2F;configure –prefix&#x3D;&#x2F;opt&#x2F;riscv<br>make linux</p>
<h6 id="riscv64-unknown-elf-gcc-g"><a href="#riscv64-unknown-elf-gcc-g" class="headerlink" title="riscv64-unknown-elf-gcc&#x2F;-g++"></a>riscv64-unknown-elf-gcc&#x2F;-g++</h6><p>目标环境：它生成的代码适用于没有标准操作系统支持的环境，如嵌入式系统或特定的硬件。<br>unknown-elf：表示目标环境是未知的，通常用于裸机或特定的运行时环境，使用ELF（Executable and Linkable Format）作为二进制格式。<br>适用场景：开发嵌入式系统、固件、或需要直接与硬件交互的程序</p>
<p>Installation (Newlib)<br>.&#x2F;configure –prefix&#x3D;&#x2F;opt&#x2F;riscv #指定安装路径。rm -rf &#x2F;opt&#x2F;riscv<br>make</p>
<h6 id="riscv64-unknown-linux-gnu-gcc"><a href="#riscv64-unknown-linux-gnu-gcc" class="headerlink" title="riscv64-unknown-linux-gnu-gcc"></a>riscv64-unknown-linux-gnu-gcc</h6><p>目标系统：与riscv64-linux-gnu-gcc相同，也是面向运行Linux的RISC-V 64位架构。<br>“unknown”：unknown部分通常是目标三元组（target triple）中的供应商字段。在这里，unknown表示没有特定的供应商信息。这是交叉编译工具链的常见约定，用于表示工具链是针对通用或未指定供应商的目标系统。<br>GNU前缀：同样表示目标系统使用GNU的libc。<br>用途：用途与riscv64-linux-gnu-gcc相同，用于编译能在RISC-V 64位Linux系统上运行的程序。</p>
<p>g++：表示这是GCC的C++编译器。</p>
<p>$ riscv64-linux-gnu-gcc –help<br>  –help                   Display this information.<br>  –target-help            Display target specific command line options.<br>  –help&#x3D;{common|optimizers|params|target|warnings|[^]{joined|separate|undocumented}}[,…].<br>                           Display specific types of command line options</p>
<h2 id="trap"><a href="#trap" class="headerlink" title="trap"></a>trap</h2><p>trap-&gt;{<br>    interupt-&gt;{<br>        software interupt<br>        timer interupt (可用于抢占式多任务)<br>        external interupt<br>    }<br>    exception-&gt;{<br>        除零之类的<br>        ecall (可用于切换模式，执行M-mode指令)<br>    }<br>}</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>riscv</tag>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+github搭网站</title>
    <url>/2023/12/06/hexo+github%E6%90%AD%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<p>由于心血来潮，决定自己搭网站。又所谓<em>拿来主义</em>，对于别人的好东西就要拿来，在此记录我参考过的网站</p>
<span id="more"></span>

<h2 id="手把手从0-1"><a href="#手把手从0-1" class="headerlink" title="手把手从0-1"></a>手把手从0-1</h2><p><a href="https://www.jianshu.com/p/85f455afcfcf">https://www.jianshu.com/p/85f455afcfcf</a></p>
<p>创建<br>$ hexo new post(default)&#x2F;draft&#x2F;page [文章名]<br>清除缓存<br>$ hexo clean<br>远端生效<br>$ hexo d -g</p>
<h2 id="使用主题next"><a href="#使用主题next" class="headerlink" title="使用主题next"></a>使用主题next</h2><p><a href="https://zhuanlan.zhihu.com/p/150737388">https://zhuanlan.zhihu.com/p/150737388</a></p>
<h2 id="RSS订阅功能"><a href="#RSS订阅功能" class="headerlink" title="RSS订阅功能"></a>RSS订阅功能</h2><p><a href="https://segmentfault.com/a/1190000012647294">https://segmentfault.com/a/1190000012647294</a></p>
<h2 id="Hexo博客Next主题bilibili视频Markdown插入文章"><a href="#Hexo博客Next主题bilibili视频Markdown插入文章" class="headerlink" title="Hexo博客Next主题bilibili视频Markdown插入文章"></a>Hexo博客Next主题bilibili视频Markdown插入文章</h2><p><a href="https://www.freesion.com/article/9552475946/">https://www.freesion.com/article/9552475946/</a></p>
<h2 id="HEXO-基本使用（讲解文章格式的）"><a href="#HEXO-基本使用（讲解文章格式的）" class="headerlink" title="HEXO 基本使用（讲解文章格式的）"></a>HEXO 基本使用（讲解文章格式的）</h2><p><a href="https://blog.csdn.net/xq151750111/article/details/133043466">https://blog.csdn.net/xq151750111/article/details/133043466</a></p>
<h2 id="Hexo教程，看这一篇就够了-How-to系列（有空研读一下）"><a href="#Hexo教程，看这一篇就够了-How-to系列（有空研读一下）" class="headerlink" title="Hexo教程，看这一篇就够了- How to系列（有空研读一下）"></a>Hexo教程，看这一篇就够了- How to系列（有空研读一下）</h2><p><a href="https://blog.csdn.net/cat_bayi/article/details/128725230">https://blog.csdn.net/cat_bayi/article/details/128725230</a></p>
<p><img src="/images/hexo+github%E6%90%AD%E7%BD%91%E7%AB%99/IMG_7006.JPG" alt="Alt text"></p>
]]></content>
      <categories>
        <category>综述</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>makefile的常用操作</title>
    <url>/2024/02/10/makefile%E7%9A%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<span id="more"></span>

<p>如何将多个对象文件（.o文件，由${OBJS}变量表示）链接成一个可执行文件（os.elf），然后将该可执行文件转换成二进制格式的镜像文件（os.bin）<br>os.elf: ${OBJS}<br>    ${CC} ${CFLAGS} -T os.ld -o os.elf $^<br>    ${OBJCOPY} -O binary os.elf os.bin</p>
<p>-T os.ld：指定链接脚本os.ld。链接脚本用于控制链接过程，如指定各个段（如代码段、数据段）的位置。<br>-o os.elf：指定输出文件的名称为os.elf。<br>$^：这是Makefile的自动变量，表示所有的依赖项，这里指${OBJS}变量中列出的所有对象文件。</p>
<p>${OBJCOPY}：这是GNU Binutils工具集中objcopy程序的变量，用于进行文件格式转换。<br>-O binary：指定输出格式为二进制。objcopy可以将ELF格式（或其他格式）的文件转换为纯二进制格式，这对于裸机程序来说是必需的，因为硬件通常直接执行二进制代码。<br>os.elf：输入文件，即上一步生成的ELF格式的可执行文件。<br>os.bin：输出文件，转换成二进制格式后的文件名。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode的常用操作</title>
    <url>/2024/02/07/vscode%E7%9A%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<span id="more"></span>


<p>A: 你本地新增的文件（服务器上没有）.<br>C: 文件的一个新拷贝.<br>D: 你本地删除的文件（服务器上还在）.<br>M: 文件的内容或者mode被修改了.<br>R: 文件名被修改了。<br>T: 文件的类型被修改了。<br>U: 文件没有被合并(你需要完成合并才能进行提交)。<br>X: 未知状态(很可能是遇到git的bug了，你可以向git提交bug report)。<br>在man git diff-files中可以查到这些标志的说明。<br>这些状态标志在git的源代码的diff.h文件中被定义。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>开发</tag>
      </tags>
  </entry>
  <entry>
    <title>学习硬件安全的网站</title>
    <url>/2023/12/06/%E5%AD%A6%E4%B9%A0%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8%E7%9A%84%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<p>作为一名信息安全的学生，由于更喜欢与真实的世界打交道，选择了深入了解硬件安全。这里就将用来记录一些关于<em>硬件安全</em>的学习网站</p>
<span id="more"></span>

<h2 id="黑客平台"><a href="#黑客平台" class="headerlink" title="黑客平台"></a>黑客平台</h2><h4 id="包含多层面的安全技术，其中有IoT安全"><a href="#包含多层面的安全技术，其中有IoT安全" class="headerlink" title="包含多层面的安全技术，其中有IoT安全"></a>包含多层面的安全技术，其中有IoT安全</h4><p><a href="https://paper.seebug.org/">https://paper.seebug.org/</a></p>
<h2 id="keystone"><a href="#keystone" class="headerlink" title="keystone"></a>keystone</h2><h4 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h4><p><a href="http://docs.keystone-enclave.org/en/latest/">http://docs.keystone-enclave.org/en/latest/</a></p>
<h4 id="【TEE自学随笔】keystone代码略读"><a href="#【TEE自学随笔】keystone代码略读" class="headerlink" title="【TEE自学随笔】keystone代码略读"></a>【TEE自学随笔】keystone代码略读</h4><p><a href="https://blog.csdn.net/BOWS7RING/article/details/116906211?spm=1001.2014.3001.5502">https://blog.csdn.net/BOWS7RING/article/details/116906211?spm=1001.2014.3001.5502</a></p>
<h4 id="一文知悉RISC-V可信执行环境：Keystone"><a href="#一文知悉RISC-V可信执行环境：Keystone" class="headerlink" title="一文知悉RISC-V可信执行环境：Keystone"></a>一文知悉RISC-V可信执行环境：Keystone</h4><p><a href="https://blog.csdn.net/weixin_45264425/article/details/134326170">https://blog.csdn.net/weixin_45264425/article/details/134326170</a></p>
<h2 id="trustzone"><a href="#trustzone" class="headerlink" title="trustzone"></a>trustzone</h2><h4 id="ARM-A64架构TrustZone学习"><a href="#ARM-A64架构TrustZone学习" class="headerlink" title="ARM A64架构TrustZone学习"></a>ARM A64架构TrustZone学习</h4><p><a href="https://blog.csdn.net/pslyunhai3255/article/details/129229732">https://blog.csdn.net/pslyunhai3255/article/details/129229732</a></p>
<h2 id="侧信道攻击"><a href="#侧信道攻击" class="headerlink" title="侧信道攻击"></a>侧信道攻击</h2><h4 id="RISC-V-CPU侧信道攻击原理与实践"><a href="#RISC-V-CPU侧信道攻击原理与实践" class="headerlink" title="RISC-V CPU侧信道攻击原理与实践"></a>RISC-V CPU侧信道攻击原理与实践</h4><p><a href="https://www.zhihu.com/people/shawn-82-88-4">https://www.zhihu.com/people/shawn-82-88-4</a></p>
<h2 id="数字ic"><a href="#数字ic" class="headerlink" title="数字ic"></a>数字ic</h2><h4 id="手把手教你蜂鸟e203移植（以Nexys4DDR为例）"><a href="#手把手教你蜂鸟e203移植（以Nexys4DDR为例）" class="headerlink" title="手把手教你蜂鸟e203移植（以Nexys4DDR为例）"></a>手把手教你蜂鸟e203移植（以Nexys4DDR为例）</h4><p><a href="https://www.cnblogs.com/Qzzz/p/17201475.html">https://www.cnblogs.com/Qzzz/p/17201475.html</a></p>
<h4 id="数字IC基础学这些就够了"><a href="#数字IC基础学这些就够了" class="headerlink" title="数字IC基础学这些就够了"></a>数字IC基础学这些就够了</h4><p><a href="https://zhuanlan.zhihu.com/p/670736813">https://zhuanlan.zhihu.com/p/670736813</a></p>
<h4 id="国产安全芯片，请关注他们！"><a href="#国产安全芯片，请关注他们！" class="headerlink" title="国产安全芯片，请关注他们！"></a>国产安全芯片，请关注他们！</h4><p><a href="https://zhuanlan.zhihu.com/p/627643776">https://zhuanlan.zhihu.com/p/627643776</a></p>
<h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><h4 id="计算机体系结构学习路线"><a href="#计算机体系结构学习路线" class="headerlink" title="计算机体系结构学习路线"></a>计算机体系结构学习路线</h4><p><a href="https://zhuanlan.zhihu.com/p/654821469">https://zhuanlan.zhihu.com/p/654821469</a></p>
]]></content>
      <categories>
        <category>综述</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>硬件</tag>
      </tags>
  </entry>
  <entry>
    <title>一生一芯相关资料</title>
    <url>/2023/12/09/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/</url>
    <content><![CDATA[<p>准备寒假有空研究一下</p>
<span id="more"></span>

<h2 id="报名参与"><a href="#报名参与" class="headerlink" title="报名参与"></a>报名参与</h2><p><a href="https://ysyx.oscc.cc/signup/">https://ysyx.oscc.cc/signup/</a><br>填写问卷-&gt;进入课程群-&gt;预学习-&gt;申请答辩-&gt;获得专属学号-&gt;.etc</p>
<h2 id="深圳理工训练营"><a href="#深圳理工训练营" class="headerlink" title="深圳理工训练营"></a>深圳理工训练营</h2><p><a href="https://tqdy06h5fq.feishu.cn/wiki/OWagweHaoiEYKWkCKEAcuMW6nMd">https://tqdy06h5fq.feishu.cn/wiki/OWagweHaoiEYKWkCKEAcuMW6nMd</a></p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>综述</category>
      </categories>
      <tags>
        <tag>开发</tag>
        <tag>硬件</tag>
      </tags>
  </entry>
  <entry>
    <title>人工智能</title>
    <url>/2023/12/08/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/</url>
    <content><![CDATA[<p>为应付期末人工智能论文，记录一下有用的网站，以防忘记</p>
<span id="more"></span>

<h2 id="1-大模型网站"><a href="#1-大模型网站" class="headerlink" title="1.大模型网站"></a>1.大模型网站</h2><h4 id="ChatGPT"><a href="#ChatGPT" class="headerlink" title="ChatGPT"></a>ChatGPT</h4><p><a href="https://chat.openai.com/">https://chat.openai.com/</a><br><a href="https://openai.com/">https://openai.com/</a></p>
<h4 id="文心一言"><a href="#文心一言" class="headerlink" title="文心一言"></a>文心一言</h4><p><a href="https://yiyan.baidu.com/">https://yiyan.baidu.com/</a><br>飞桨AI(调用文心一言)<br><a href="https://aistudio.baidu.com/cooperate/erniebotsdk">https://aistudio.baidu.com/cooperate/erniebotsdk</a></p>
<h4 id="智谱AI"><a href="#智谱AI" class="headerlink" title="智谱AI"></a>智谱AI</h4><p><a href="https://open.bigmodel.cn/">https://open.bigmodel.cn/</a></p>
<h4 id="星火大模型"><a href="#星火大模型" class="headerlink" title="星火大模型"></a>星火大模型</h4><p><a href="https://xinghuo.xfyun.cn/">https://xinghuo.xfyun.cn/</a></p>
<h2 id="2-调用API-python"><a href="#2-调用API-python" class="headerlink" title="2.调用API(python)"></a>2.调用API(python)</h2><h4 id="用飞桨AI调用文心大模型"><a href="#用飞桨AI调用文心大模型" class="headerlink" title="用飞桨AI调用文心大模型"></a>用飞桨AI调用文心大模型</h4><p><a href="https://zhuanlan.zhihu.com/p/661241466">https://zhuanlan.zhihu.com/p/661241466</a></p>
<h4 id="智谱AI官方调用文档"><a href="#智谱AI官方调用文档" class="headerlink" title="智谱AI官方调用文档"></a>智谱AI官方调用文档</h4><p><a href="https://open.bigmodel.cn/dev/api#chatglm_turbo">https://open.bigmodel.cn/dev/api#chatglm_turbo</a></p>
<h4 id="星火大模型-1"><a href="#星火大模型-1" class="headerlink" title="星火大模型"></a>星火大模型</h4><p><a href="https://zhuanlan.zhihu.com/p/671067886">https://zhuanlan.zhihu.com/p/671067886</a></p>
<h2 id="3-prompt"><a href="#3-prompt" class="headerlink" title="3.prompt"></a>3.prompt</h2><h4 id="大模型时代的科研基础之：Prompt-Engineering"><a href="#大模型时代的科研基础之：Prompt-Engineering" class="headerlink" title="大模型时代的科研基础之：Prompt Engineering"></a>大模型时代的科研基础之：Prompt Engineering</h4><iframe src="//player.bilibili.com/player.html?aid=313877142&bvid=BV13P41197c6&cid=1137176592&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
可以当作研究过程写进论文

<h2 id="4-评估模型好坏的方法"><a href="#4-评估模型好坏的方法" class="headerlink" title="4.评估模型好坏的方法"></a>4.评估模型好坏的方法</h2><h4 id="干货分享！如何评估-大型语言模型（LLMs）的输出质量？评估方法大盘点！"><a href="#干货分享！如何评估-大型语言模型（LLMs）的输出质量？评估方法大盘点！" class="headerlink" title="干货分享！如何评估 大型语言模型（LLMs）的输出质量？评估方法大盘点！"></a>干货分享！如何评估 大型语言模型（LLMs）的输出质量？评估方法大盘点！</h4><p><a href="https://zhuanlan.zhihu.com/p/660777460">https://zhuanlan.zhihu.com/p/660777460</a></p>
<h4 id="【Mo-人工智能技术博客】联邦学习鲁棒性及相关论文分享"><a href="#【Mo-人工智能技术博客】联邦学习鲁棒性及相关论文分享" class="headerlink" title="【Mo 人工智能技术博客】联邦学习鲁棒性及相关论文分享"></a>【Mo 人工智能技术博客】联邦学习鲁棒性及相关论文分享</h4><p><a href="https://zhuanlan.zhihu.com/p/337048283">https://zhuanlan.zhihu.com/p/337048283</a></p>
<h4 id="《大模型时代的科研》之2-Prompt-Engineering-提示词工程"><a href="#《大模型时代的科研》之2-Prompt-Engineering-提示词工程" class="headerlink" title="《大模型时代的科研》之2: Prompt Engineering (提示词工程)"></a>《大模型时代的科研》之2: Prompt Engineering (提示词工程)</h4><p>这个是在讲怎么构造好的prompt,与本次论文关系不大<br><a href="https://zhuanlan.zhihu.com/p/631922240">https://zhuanlan.zhihu.com/p/631922240</a></p>
<h4 id="大模型鲁棒不鲁棒，PromptBench测一测-首个大语言模型提示鲁棒性的评测基准PromptBench"><a href="#大模型鲁棒不鲁棒，PromptBench测一测-首个大语言模型提示鲁棒性的评测基准PromptBench" class="headerlink" title="大模型鲁棒不鲁棒，PromptBench测一测: 首个大语言模型提示鲁棒性的评测基准PromptBench"></a>大模型鲁棒不鲁棒，PromptBench测一测: 首个大语言模型提示鲁棒性的评测基准PromptBench</h4><p><a href="https://zhuanlan.zhihu.com/p/637219127">https://zhuanlan.zhihu.com/p/637219127</a></p>
<h2 id="5-debug"><a href="#5-debug" class="headerlink" title="5.debug"></a>5.debug</h2><h4 id="python文件名不能与包名重复"><a href="#python文件名不能与包名重复" class="headerlink" title="python文件名不能与包名重复"></a>python文件名不能与包名重复</h4><p><a href="https://blog.csdn.net/long_songs/article/details/129070598">https://blog.csdn.net/long_songs/article/details/129070598</a></p>
<h4 id="windows中为终端设置代理"><a href="#windows中为终端设置代理" class="headerlink" title="windows中为终端设置代理"></a>windows中为终端设置代理</h4><p><a href="https://blog.csdn.net/qq_43651168/article/details/131074308">https://blog.csdn.net/qq_43651168/article/details/131074308</a></p>
<h4 id="python同步遍历两个列表"><a href="#python同步遍历两个列表" class="headerlink" title="python同步遍历两个列表"></a>python同步遍历两个列表</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for prompt, reference in zip(test_accuarcy_cases, test_accuarcy_reference):</span><br><span class="line">	#balbala</span><br><span class="line">	#</span><br></pre></td></tr></table></figure>

<h2 id="6-短信接收"><a href="#6-短信接收" class="headerlink" title="6.短信接收"></a>6.短信接收</h2><p><a href="https://sms-activate.org/cn">https://sms-activate.org/cn</a></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>开发</tag>
        <tag>ai</tag>
      </tags>
  </entry>
  <entry>
    <title>配置vivado</title>
    <url>/2023/12/26/%E9%85%8D%E7%BD%AEvivado/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="VSCode关联VIVADO编辑Verilog"><a href="#VSCode关联VIVADO编辑Verilog" class="headerlink" title="VSCode关联VIVADO编辑Verilog"></a>VSCode关联VIVADO编辑Verilog</h2><p><a href="https://blog.csdn.net/wd12306/article/details/128929552">https://blog.csdn.net/wd12306/article/details/128929552</a></p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>导入的文件可以不在{projectdir}\newcounter\newcounter.srcs中，<br><img src="/../images/%E9%85%8D%E7%BD%AEvivado/image.png" alt="Alt text"></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>硬件，开发</tag>
      </tags>
  </entry>
</search>

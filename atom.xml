<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>myBlog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-04-09T04:22:42.594Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>luluji</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>虚拟机配置</title>
    <link href="http://example.com/2024/04/01/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2024/04/01/%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%85%8D%E7%BD%AE/</id>
    <published>2024-04-01T12:39:06.000Z</published>
    <updated>2024-04-09T04:22:42.594Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="配置静态ip"><a href="#配置静态ip" class="headerlink" title="配置静态ip"></a>配置静态ip</h2><p><a href="https://blog.csdn.net/Un1qu3/article/details/126155766">https://blog.csdn.net/Un1qu3/article/details/126155766</a><br><a href="https://blog.csdn.net/Conquer_l/article/details/124989551">https://blog.csdn.net/Conquer_l/article/details/124989551</a><br><a href="https://blog.csdn.net/lk142500/article/details/88386651">https://blog.csdn.net/lk142500/article/details/88386651</a><br><img src="/2146089-20200911223717884-1559586693.png" alt="alt text"><br><a href="https://www.cnblogs.com/yansunda/p/13654632.html">https://www.cnblogs.com/yansunda/p/13654632.html</a></p><p>vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth33<br>sudo systemctl restart NetworkManager</p><p>1:查看防火状态<br>systemctl status firewalld<br>service  iptables status<br>2:暂时关闭防火墙<br>systemctl stop firewalld<br>service  iptables stop<br>3:永久关闭防火墙<br>systemctl disable firewalld<br>chkconfig iptables off<br>4:重启防火墙<br>systemctl enable firewalld<br>service iptables restart<br>5:永久关闭后重启<br>chkconfig iptables on  </p><p>关闭selinux<br>暂时：<br>setenforce 0<br>永久：<br>输入命令 <code>vi /etc/selinux/config</code>。<br>在打开的文件中，找到 <code>SELINUX=</code> 这一行，将其从 <code>enforcing</code> 或 <code>permissive</code> 修改为 <code>disabled</code>。</p><p>arp -a<br>展示运行过的ping</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;配置静态ip&quot;&gt;&lt;a href=&quot;#配置静态ip&quot; class=&quot;headerlink&quot; title=&quot;配置静态ip&quot;&gt;&lt;/a&gt;配置静态ip&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.ne</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>mysql</title>
    <link href="http://example.com/2024/03/24/mysql/"/>
    <id>http://example.com/2024/03/24/mysql/</id>
    <published>2024-03-24T09:01:47.000Z</published>
    <updated>2024-04-09T05:39:09.400Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><a href="https://www.zhihu.com/question/620270343">https://www.zhihu.com/question/620270343</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/620270343&quot;&gt;https://www.zhihu.com/question/620270343&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>操作系统</title>
    <link href="http://example.com/2024/03/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2024/03/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</id>
    <published>2024-03-05T06:15:09.000Z</published>
    <updated>2024-04-09T05:31:10.786Z</updated>
    
    <content type="html"><![CDATA[<p>SISD<br>MISD：可靠性<br>MIMD</p><p>多处理器：多个芯片<br>多核：多个执行单元</p><p>多处理器结构<br>超线程结构：一个处理器多个线程环境<br>多核结构：多个cache（缓冲）<br>多核超线程结构</p><p>特权指令：只供操作系统使用<br>设置定时器<br>清除内存<br>发起陷入指令<br>关中断<br>修改设备状态信息<br>用户与内核态切换<br>访问I&#x2F;O设备</p><p>SGX加密，用户内存加密隔离</p><p>切换步骤：保存处理器现场，根据终端号设置程序计数器，转换PSW</p><p>psw：程序状态字寄存器<br>pc，条件码，</p><p>程序：堆栈，函数：栈帧</p><p>海光的amd zen</p><p>内存管理寄存器{<br>    段描述符{<br>    GDTR 全局描述符寄存器<br>    } + ip<br>    IDTR：中断描述符寄存器 + 偏移<br>    TR：<br>}</p><p>psw：EFLAG和ip</p><p>bios在flash</p><p>启动规范<br>legacy bios<br>uefi</p><p>bios-&gt;bootloader</p><p>同步中断：异常，非法指令（page fault，内存错误，除零错误）<br>异步中断：中断，硬件设备<br>系统调用：应用程序</p><p>出错：page fault,重新执行<br>陷入：用于调试，下一指令</p><p>异常在内核中：挂了</p><p>关中断保证指令的原子性</p><h2 id="安装openeuler"><a href="#安装openeuler" class="headerlink" title="安装openeuler"></a>安装openeuler</h2><p><a href="https://blog.51cto.com/shuchaoyang/6604107">https://blog.51cto.com/shuchaoyang/6604107</a></p><h2 id="安装新内核"><a href="#安装新内核" class="headerlink" title="安装新内核"></a>安装新内核</h2><p><a href="https://blog.csdn.net/m0_51683653/article/details/124133370">https://blog.csdn.net/m0_51683653/article/details/124133370</a></p><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>arch&#x2F;x86&#x2F;entry&#x2F;thunk_64.o: warning: objtool: missing symbol table<br><a href="https://www.spinics.net/lists/kernel/msg3797871.html">https://www.spinics.net/lists/kernel/msg3797871.html</a></p><h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><p><a href="https://blog.csdn.net/MengMengDeXiaoJi/article/details/136821507">https://blog.csdn.net/MengMengDeXiaoJi/article/details/136821507</a></p><h2 id="内核模块"><a href="#内核模块" class="headerlink" title="内核模块"></a>内核模块</h2><p><a href="https://blog.csdn.net/m0_74282605/article/details/135866888">https://blog.csdn.net/m0_74282605/article/details/135866888</a></p><h2 id="list宏"><a href="#list宏" class="headerlink" title="list宏"></a>list宏</h2><p><a href="https://blog.csdn.net/weixin_44498318/article/details/132275727">https://blog.csdn.net/weixin_44498318/article/details/132275727</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;SISD&lt;br&gt;MISD：可靠性&lt;br&gt;MIMD&lt;/p&gt;
&lt;p&gt;多处理器：多个芯片&lt;br&gt;多核：多个执行单元&lt;/p&gt;
&lt;p&gt;多处理器结构&lt;br&gt;超线程结构：一个处理器多个线程环境&lt;br&gt;多核结构：多个cache（缓冲）&lt;br&gt;多核超线程结构&lt;/p&gt;
&lt;p&gt;特权指令：只供操作</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>git的使用</title>
    <link href="http://example.com/2024/03/02/git%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2024/03/02/git%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2024-03-01T17:20:46.000Z</published>
    <updated>2024-04-09T05:38:50.514Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="git-config"><a href="#git-config" class="headerlink" title="git config"></a>git config</h2><p>在 Git 中，你可以使用以下命令来查看和修改配置：<br>查看配置</p><pre><code>查看全局配置：</code></pre><p>bash<br>git config –global –list</p><pre><code>查看当前仓库的配置：</code></pre><p>bash<br>git config –local –list</p><pre><code>查看系统配置：</code></pre><p>bash<br>git config –system –list</p><p>如果你只想知道某个特定配置的值，你可以这样做：</p><p>bash<br>git config &lt;配置项名称&gt;</p><p>例如，要查看全局的用户名配置：</p><p>bash<br>git config –global user.name</p><p>修改配置</p><pre><code>设置全局配置：    设置用户名：bash`git config --global user.name &quot;Your Name&quot;`    设置邮箱：bash`git config --global user.email &quot;your.email@example.com&quot;`设置当前仓库的配置：</code></pre><p>与全局配置类似，但使用 –local 代替 –global。<br>3. 设置系统配置：</p><p>通常不推荐修改系统配置，除非你有特定的理由。<br>4. 直接编辑配置文件：</p><p>你也可以直接编辑 Git 的配置文件。这些文件通常位于以下位置：</p><ul><li><strong>全局配置</strong>：<code>~/.gitconfig</code>  </li><li><strong>系统配置</strong>：<code>/etc/gitconfig</code>（Linux）或 <code>/usr/local/git/etc/gitconfig</code>（macOS）  </li><li><strong>当前仓库配置</strong>：仓库目录下的 <code>.git/config</code> 文件。使用文本编辑器打开这些文件，然后进行相应的修改。</li></ul><p>注意：当你设置或修改配置时，Git 会尝试从多个级别（系统、全局、本地）获取配置值。如果某个配置项在多个级别都有设置，Git 会优先使用本地仓库的配置，然后是全局配置，最后是系统配置。</p><h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h2><p><code>git remote</code>命令在Git中用于管理一组跟踪的远程仓库。它允许您查看、添加、修改和删除与您的本地仓库关联的远程仓库的配置。远程仓库通常是位于互联网或其他网络中的仓库，可以是一个中心仓库，也可以是另一个开发者的仓库，您可以从中拉取（pull）数据或向其推送（push）数据。使用<code>git remote</code>可以进行以下操作：</p><ul><li><p><strong>查看远程仓库</strong>：使用<code>git remote</code>或<code>git remote -v</code>命令可以列出所有已配置的远程仓库。<code>-v</code>（verbose，详细）选项会额外显示每个远程仓库的URL。</p></li><li><p><strong>添加远程仓库</strong>：使用<code>git remote add &lt;name&gt; &lt;url&gt;</code>命令可以添加新的远程仓库，其中<code>&lt;name&gt;</code>是您为远程仓库指定的简短名称（如<code>origin</code>），<code>&lt;url&gt;</code>是远程仓库的URL。</p></li><li><p><strong>更改远程仓库URL</strong>：使用<code>git remote set-url &lt;name&gt; &lt;newurl&gt;</code>命令可以更改已存在的远程仓库的URL。</p></li><li><p><strong>删除远程仓库</strong>：使用<code>git remote remove &lt;name&gt;</code>或<code>git remote rm &lt;name&gt;</code>命令可以删除一个远程仓库的引用。</p></li><li><p><strong>重命名远程仓库</strong>：使用<code>git remote rename &lt;oldname&gt; &lt;newname&gt;</code>命令可以重命名远程仓库的简称。</p></li></ul><p>在协同工作流中，<code>git remote</code>命令是非常重要的，它使得开发者能够与远程仓库交互，共享代码和协作。例如，<code>origin</code>通常是克隆仓库时自动创建的默认远程仓库名称，代表了克隆来源的仓库。通过管理远程仓库，您可以轻松地同步本地更改到远程服务器，或者拉取他人的更改到您的本地仓库中。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h2 id=&quot;git-config&quot;&gt;&lt;a href=&quot;#git-config&quot; class=&quot;headerlink&quot; title=&quot;git config&quot;&gt;&lt;/a&gt;git config&lt;/h2&gt;&lt;p&gt;在 Git 中，你可以使用以</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>c语言中的宏</title>
    <link href="http://example.com/2024/02/26/c%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%AE%8F/"/>
    <id>http://example.com/2024/02/26/c%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%AE%8F/</id>
    <published>2024-02-26T09:19:06.000Z</published>
    <updated>2024-02-26T09:23:09.508Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>在C语言中，预处理器提供了几个特殊的宏用于宏定义中，这些特殊的宏包括<code>__VA_ARGS__</code>、<code>__FILE__</code>、<code>__LINE__</code>、<code>__DATE__</code>、<code>__TIME__</code>和<code>__func__</code>。下面是对它们的简要说明：</p><h3 id="VA-ARGS"><a href="#VA-ARGS" class="headerlink" title="__VA_ARGS__"></a><code>__VA_ARGS__</code></h3><ul><li><code>__VA_ARGS__</code>是一个预处理器宏，用于在宏定义中代替可变数量的参数。这主要用于可变参数宏（Variadic Macros）的定义中，允许宏接受任意数量的参数。</li><li>示例：  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG(fmt, ...) fprintf(stderr, fmt, __VA_ARGS__)</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="FILE"><a href="#FILE" class="headerlink" title="__FILE__"></a><code>__FILE__</code></h3><ul><li><code>__FILE__</code>是一个预定义宏，它在编译时被替换为当前源代码文件的名称（一个字符串常量）。</li><li>示例使用场景：用于生成包含文件名的错误消息。</li></ul><h3 id="LINE"><a href="#LINE" class="headerlink" title="__LINE__"></a><code>__LINE__</code></h3><ul><li><code>__LINE__</code>是一个预定义宏，它在编译时被替换为当前源代码行号（一个整型常量）。</li><li>示例使用场景：同样用于生成错误消息，指明错误发生的具体行。</li></ul><h3 id="DATE-和-TIME"><a href="#DATE-和-TIME" class="headerlink" title="__DATE__ 和 __TIME__"></a><code>__DATE__</code> 和 <code>__TIME__</code></h3><ul><li><code>__DATE__</code>和<code>__TIME__</code>是预定义宏，分别在编译时被替换为编译日期和时间的字符串常量。</li><li>示例使用场景：用于记录程序的编译日期和时间，可能用于显示版本信息。</li></ul><h3 id="func"><a href="#func" class="headerlink" title="__func__"></a><code>__func__</code></h3><ul><li><code>__func__</code>是一个特殊的预定义标识符，它在函数的作用域内被认为是一个字符串常量，包含当前函数的名称。</li><li>注意：虽然<code>__func__</code>在C99标准中引入，有时被视为预处理器的一部分，但它实际上是一个自动变量。</li><li>示例使用场景：用于在日志消息中包含当前函数的名称。</li></ul><p>这些宏和标识符在调试、日志记录和错误处理中特别有用，因为它们可以提供执行到达代码特定点时的上下文信息。</p><p>除了前面提到的预处理器宏外，C语言的预处理器还提供了一些其他有用的操作符，比如<code>##</code>和<code>#</code>。这些操作符在宏定义中扮演特殊的角色，使得宏更加灵活和强大。</p><h3 id="操作符（Token-Pasting-Operator）"><a href="#操作符（Token-Pasting-Operator）" class="headerlink" title="## 操作符（Token Pasting Operator）"></a><code>##</code> 操作符（Token Pasting Operator）</h3><ul><li><code>##</code>操作符用于宏定义中，用于连接两个令牌（Token）。它允许在宏展开时动态地创建标识符或关键字。</li><li>使用<code>##</code>可以合并宏参数和其他令牌，生成新的标识符。</li><li>示例：  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> CONCAT(a, b) a##b</span></span><br><span class="line">CONCAT(hello, World) <span class="comment">// 展开为 helloWorld</span></span><br></pre></td></tr></table></figure></li><li>在这个例子中，<code>CONCAT</code>宏将它的两个参数<code>a</code>和<code>b</code>连接起来，形成一个新的标识符<code>helloWorld</code>。</li></ul><h3 id="操作符（Stringizing-Operator）"><a href="#操作符（Stringizing-Operator）" class="headerlink" title="# 操作符（Stringizing Operator）"></a><code>#</code> 操作符（Stringizing Operator）</h3><ul><li><code>#</code>操作符用于宏定义中，将一个宏参数转换成字符串字面量。</li><li>当宏展开时，跟在<code>#</code>后面的宏参数会被转换为一个字符串，参数的文本形式被引号包围。</li><li>示例：  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> TO_STRING(x) #x</span></span><br><span class="line">TO_STRING(<span class="number">123</span>) <span class="comment">// 展开为 &quot;123&quot;</span></span><br></pre></td></tr></table></figure></li><li>在这个例子中，<code>TO_STRING</code>宏将它的参数<code>x</code>转换为一个字符串字面量。</li></ul><h3 id="Pragma-操作符"><a href="#Pragma-操作符" class="headerlink" title="_Pragma 操作符"></a><code>_Pragma</code> 操作符</h3><ul><li>C99引入了<code>_Pragma</code>操作符，允许在宏中生成编译指令（pragma）。这是一种将编译器特定的指令（如优化级别或警告控制）以可移植的方式嵌入源代码的方法。</li><li>示例：  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PRAGMA_COMPILATION_WARNING(x) <span class="keyword">_Pragma</span>(#x)</span></span><br><span class="line">PRAGMA_COMPILATION_WARNING(GCC diagnostic ignored <span class="string">&quot;-Wformat&quot;</span>)</span><br></pre></td></tr></table></figure></li><li>在这个例子中，<code>PRAGMA_COMPILATION_WARNING</code>宏允许动态地插入一个编译指令来忽略特定的警告。</li></ul><p>这些预处理器功能为C语言提供了极大的灵活性，使得宏不仅仅是简单的文本替换工具，而是可以执行复杂的代码生成任务和条件编译。使用这些特性时需要小心，因为过度使用或不当使用可能会使代码难以阅读和维护。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;在C语言中，预处理器提供了几个特殊的宏用于宏定义中，这些特殊的宏包括&lt;code&gt;__VA_ARGS__&lt;/code&gt;、&lt;code&gt;__FILE__&lt;/code&gt;、&lt;code&gt;__LINE__&lt;/code&gt;、&lt;code&gt;__D</summary>
      
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="开发" scheme="http://example.com/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="C/C++" scheme="http://example.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>buildroot的使用</title>
    <link href="http://example.com/2024/02/18/buildroot%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2024/02/18/buildroot%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2024-02-18T04:05:12.000Z</published>
    <updated>2024-02-18T04:06:20.812Z</updated>
    
    <content type="html"><![CDATA[<p>在使用Buildroot构建嵌入式Linux系统时，<code>BR2_EXTERNAL</code>是一个重要的机制，它允许用户将自定义的配置、包（packages）、板级支持包（board support packages，简称BSPs）、以及其他构建脚本和文件集成到Buildroot构建过程中，而不必直接修改Buildroot的主树。这种机制非常有用，因为它使得维护自定义修改和跟踪Buildroot官方更新变得更加容易。</p><h3 id="使用BR2-EXTERNAL的优势"><a href="#使用BR2-EXTERNAL的优势" class="headerlink" title="使用BR2_EXTERNAL的优势"></a>使用BR2_EXTERNAL的优势</h3><ul><li><strong>模块化</strong>：允许将自定义内容和Buildroot主树分开，便于管理。</li><li><strong>易于维护</strong>：更新Buildroot版本时，可以避免合并冲突，简化维护工作。</li><li><strong>重用性</strong>：相同的自定义配置和包可以轻松地在多个项目之间共享和重用。</li></ul><h3 id="如何使用BR2-EXTERNAL"><a href="#如何使用BR2-EXTERNAL" class="headerlink" title="如何使用BR2_EXTERNAL"></a>如何使用BR2_EXTERNAL</h3><ol><li><p><strong>创建外部树结构</strong>：首先，你需要创建一个目录作为你的外部树，这个目录将包含你的自定义配置和文件。外部树的推荐目录结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">your-external-tree/</span><br><span class="line">├── Config.in</span><br><span class="line">├── external.desc</span><br><span class="line">├── external.mk</span><br><span class="line">├── configs/</span><br><span class="line">├── board/</span><br><span class="line">├── package/</span><br><span class="line">└── fs/</span><br></pre></td></tr></table></figure><p>其中<code>configs/</code>用于存放自定义的配置文件，<code>package/</code>用于存放自定义的软件包描述文件，<code>board/</code>可能包含板级特定文件，如启动脚本和覆盖层。</p></li><li><p><strong>设置BR2_EXTERNAL环境变量</strong>：在运行Buildroot的<code>make menuconfig</code>之前，通过环境变量<code>BR2_EXTERNAL</code>指向你的外部树目录。这可以通过在命令行中直接设置，或者添加到你的shell配置文件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export BR2_EXTERNAL=/path/to/your-external-tree</span><br></pre></td></tr></table></figure><p>或者，在make命令中直接指定：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make BR2_EXTERNAL=/path/to/your-external-tree menuconfig</span><br></pre></td></tr></table></figure></li><li><p><strong>使用自定义配置和包</strong>：一旦设置了<code>BR2_EXTERNAL</code>，Buildroot构建系统将自动识别外部树中的配置和包。你可以在<code>make menuconfig</code>中选择这些包，或者使用外部树中定义的配置作为构建的起点。</p></li><li><p><strong>构建系统</strong>：使用你的配置构建系统。如果一切设置正确，Buildroot将包含你的外部树中的自定义内容进行构建。</p></li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>多个外部树</strong>：从Buildroot 2016.11版本开始，<code>BR2_EXTERNAL</code>支持指定多个外部树路径，使用冒号(<code>:</code>)分隔。</li><li><strong>版本兼容性</strong>：在使用<code>BR2_EXTERNAL</code>时，要确保外部树中的自定义内容与Buildroot的版本兼容。</li></ul><p>通过使用<code>BR2_EXTERNAL</code>，你可以灵活地扩展Buildroot，添加自定义功能和支持，同时保持与Buildroot主树的清晰分离，这对于项目的长期维护和升级非常有益。</p><p>当使用<code>BR2_EXTERNAL</code>机制在Buildroot中引入外部树时，你需要在外部树的根目录创建一些特定的文件和目录来定义你的自定义配置、板级支持包、软件包和文件系统扩展。以下是如何组织和编写这些文件的一些基本指导：</p><h3 id="1-Config-in"><a href="#1-Config-in" class="headerlink" title="1. Config.in"></a>1. Config.in</h3><p><code>Config.in</code>是一个Kconfig文件，它定义了在Buildroot配置界面中出现的选项。这个文件通常用来引入外部软件包的配置选项或者特定的配置界面。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">menu <span class="string">&quot;My Custom Options&quot;</span></span><br><span class="line"></span><br><span class="line">config BR2_PACKAGE_MY_CUSTOM_PACKAGE</span><br><span class="line">    bool <span class="string">&quot;My custom package&quot;</span></span><br><span class="line">    help</span><br><span class="line">      This option will enable my custom package.</span><br><span class="line"></span><br><span class="line">endmenu</span><br></pre></td></tr></table></figure><p>此文件中定义的选项可以在Buildroot的配置界面中找到，并允许用户启用或禁用特定功能。</p><h3 id="2-external-desc"><a href="#2-external-desc" class="headerlink" title="2. external.desc"></a>2. external.desc</h3><p><code>external.desc</code>是Buildroot 2020.02版本后引入的新文件，用于描述外部树的元数据，如名称和描述。这个文件不是必需的，但有助于识别外部树。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name: my-external-tree</span><br><span class="line">description: My custom external tree for Buildroot</span><br></pre></td></tr></table></figure><h3 id="3-external-mk"><a href="#3-external-mk" class="headerlink" title="3. external.mk"></a>3. external.mk</h3><p><code>external.mk</code>是Makefile片段，用于包含外部软件包的构建规则。这个文件会被Buildroot构建系统自动包含。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example of including a custom package</span></span><br><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(BR2_PACKAGE_MY_CUSTOM_PACKAGE)</span>,y)</span><br><span class="line"><span class="keyword">include</span> package/my_custom_package/my_custom_package.mk</span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure><h3 id="4-configs"><a href="#4-configs" class="headerlink" title="4. configs&#x2F;"></a>4. configs&#x2F;</h3><p><code>configs/</code>目录包含预定义的Buildroot配置文件，这些文件可以通过<code>make &lt;config_name&gt;_defconfig</code>命令使用。这些配置文件通常用于快速配置Buildroot以使用特定的板级支持包或软件包组合。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Example of a custom defconfig file</span><br><span class="line">BR2_PACKAGE_MY_CUSTOM_PACKAGE=y</span><br></pre></td></tr></table></figure><h3 id="5-board"><a href="#5-board" class="headerlink" title="5. board&#x2F;"></a>5. board&#x2F;</h3><p><code>board/</code>目录包含特定于板级的文件，如启动脚本、内核配置片段或根文件系统覆盖层。</p><h3 id="6-package"><a href="#6-package" class="headerlink" title="6. package&#x2F;"></a>6. package&#x2F;</h3><p><code>package/</code>目录包含自定义软件包的描述和构建规则。每个软件包目录下通常包含两个文件：<code>Config.in</code>和<code>&lt;package_name&gt;.mk</code>。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># package/my_custom_package/Config.in</span></span><br><span class="line">config BR2_PACKAGE_MY_CUSTOM_PACKAGE</span><br><span class="line">    bool <span class="string">&quot;My custom package&quot;</span></span><br><span class="line">    help</span><br><span class="line">      My custom package description.</span><br></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># package/my_custom_package/my_custom_package.mk</span></span><br><span class="line">MY_CUSTOM_PACKAGE_VERSION = 1.0</span><br><span class="line">MY_CUSTOM_PACKAGE_SITE = <span class="variable">$(TOPDIR)</span>/path/to/my_custom_package/source</span><br><span class="line">MY_CUSTOM_PACKAGE_LICENSE = GPL-2.0+</span><br><span class="line"></span><br><span class="line"><span class="keyword">define</span> MY_CUSTOM_PACKAGE_BUILD_CMDS</span><br><span class="line">    <span class="variable">$(MAKE)</span> CC=<span class="string">&quot;<span class="variable">$(TARGET_CC)</span>&quot;</span> -C $(@D)</span><br><span class="line"><span class="keyword">endef</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">define</span> MY_CUSTOM_PACKAGE_INSTALL_TARGET_CMDS</span><br><span class="line">    <span class="variable">$(INSTALL)</span> -D -m 0755 $(@D)/my_custom_package <span class="variable">$(TARGET_DIR)</span>/usr/bin</span><br><span class="line"><span class="keyword">endef</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(<span class="built_in">eval</span> $(generic-package)</span>)</span><br></pre></td></tr></table></figure><h3 id="7-fs"><a href="#7-fs" class="headerlink" title="7. fs&#x2F;"></a>7. fs&#x2F;</h3><p><code>fs/</code>目录用于添加自定义文件系统支持。这里可以放置生成特定类型文件系统镜像的脚本和配置。</p><p>这些文件和目录为你提供了一个框架来扩展Buildroot，添加自定义板级支持、软件包和配置。确保遵循Buildroot的文档和现有的样板（boilerplate）代码来正确实现这些自定义扩展。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在使用Buildroot构建嵌入式Linux系统时，&lt;code&gt;BR2_EXTERNAL&lt;/code&gt;是一个重要的机制，它允许用户将自定义的配置、包（packages）、板级支持包（board support packages，简称BSPs）、以及其他构建脚本和文件集成到B</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>c文件之间的调用</title>
    <link href="http://example.com/2024/02/17/c%E6%96%87%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8/"/>
    <id>http://example.com/2024/02/17/c%E6%96%87%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8/</id>
    <published>2024-02-16T16:22:35.000Z</published>
    <updated>2024-02-25T12:01:46.346Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>在C语言中，不同的<code>.c</code>文件（编译单元）之间相互调用函数和访问变量需要正确地使用<code>extern</code>、<code>static</code>和<code>inline</code>等关键字。以下是如何在不同方面使用这些关键字来实现跨文件的函数调用和变量访问。</p><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><h4 id="跨文件调用函数"><a href="#跨文件调用函数" class="headerlink" title="跨文件调用函数"></a>跨文件调用函数</h4><ul><li><strong>定义函数</strong>：在一个<code>.c</code>文件中定义函数。无需特别声明<code>extern</code>，因为函数默认具有外部链接。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file1.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">myFunction</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 函数实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>声明函数</strong>：在另一个<code>.c</code>文件中调用该函数之前，需要提前声明该函数。通常，这种声明放在头文件中，并在需要调用函数的<code>.c</code>文件中包含这个头文件。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file1.h</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">myFunction</span><span class="params">()</span>; <span class="comment">// 函数声明</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file2.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;file1.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    myFunction(); <span class="comment">// 调用file1.c中定义的函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="static关键字限制函数的链接性"><a href="#static关键字限制函数的链接性" class="headerlink" title="static关键字限制函数的链接性"></a><code>static</code>关键字限制函数的链接性</h4><ul><li>使用<code>static</code>关键字声明函数，可以使得该函数只在定义它的<code>.c</code>文件中可见，其他文件无法访问。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file1.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">myStaticFunction</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 这个函数只能在file1.c中调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="inline关键字"><a href="#inline关键字" class="headerlink" title="inline关键字"></a><code>inline</code>关键字</h4><ul><li>对于小型函数，可以使用<code>inline</code>关键字建议编译器内联该函数。对于跨文件调用，通常将<code>inline</code>函数定义放在头文件中，并且可能需要配合<code>static</code>使用，以避免多重定义。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file1.h</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">myInlineFunction</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 函数实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量访问"><a href="#变量访问" class="headerlink" title="变量访问"></a>变量访问</h3><h4 id="跨文件访问全局变量"><a href="#跨文件访问全局变量" class="headerlink" title="跨文件访问全局变量"></a>跨文件访问全局变量</h4><ul><li><strong>定义变量</strong>：在一个<code>.c</code>文件中定义全局变量。如果你希望这个变量能在其他文件中访问，不要使用<code>static</code>关键字。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file1.c</span></span><br><span class="line"><span class="type">int</span> myGlobalVar = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>声明变量</strong>：在其他<code>.c</code>文件中访问这个全局变量之前，需要使用<code>extern</code>关键字声明它。同样，这种声明通常放在头文件中。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file1.h</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> myGlobalVar; <span class="comment">// 声明，不是定义</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file2.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;file1.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">anotherFunction</span><span class="params">()</span> &#123;</span><br><span class="line">    myGlobalVar = <span class="number">5</span>; <span class="comment">// 访问并修改file1.c中定义的全局变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="static关键字限制变量的链接性"><a href="#static关键字限制变量的链接性" class="headerlink" title="static关键字限制变量的链接性"></a><code>static</code>关键字限制变量的链接性</h4><ul><li>使用<code>static</code>关键字定义全局变量，可以使得该变量只在定义它的<code>.c</code>文件中可见，其他文件无法访问或修改。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file1.c</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> myStaticVar = <span class="number">0</span>; <span class="comment">// 只在file1.c中可见和可用</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>使用<code>extern</code>声明跨文件访问的全局变量。</li><li>函数默认具有外部链接，可通过在头文件中声明来跨文件访问。如果不希望函数或变量被外部访问，可以使用<code>static</code>限制它们的链接性。</li><li>对于希望内联的小函数，可以使用<code>inline</code>关键字，并且通常需要将其定义放在头文件中。为了避免多重定义问题，可以与<code>static</code>一起使用。</li></ul><h2 id="c调用动态库"><a href="#c调用动态库" class="headerlink" title="c调用动态库"></a>c调用动态库</h2><h3 id="动态加载共享库"><a href="#动态加载共享库" class="headerlink" title="动态加载共享库"></a>动态加载共享库</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *handle;</span><br><span class="line">handle = dlopen(ref_so_file, RTLD_LAZY);</span><br><span class="line">assert(handle);</span><br></pre></td></tr></table></figure><ul><li><code>dlopen</code>函数用于加载指定的共享库文件，并返回一个句柄（handle）给该库。如果加载失败，返回<code>NULL</code>。</li><li><code>ref_so_file</code>是一个指向共享库文件名的指针。</li><li><code>RTLD_LAZY</code>表示延迟绑定，意味着符号解析是在第一次使用时进行，而不是在<code>dlopen</code>调用时立即进行。</li><li><code>assert(handle)</code>确保库正确加载，如果<code>handle</code>为<code>NULL</code>，则<code>assert</code>会导致程序终止。</li></ul><h3 id="获取共享库中的符号"><a href="#获取共享库中的符号" class="headerlink" title="获取共享库中的符号"></a>获取共享库中的符号</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ref_difftest_memcpy = dlsym(handle, <span class="string">&quot;difftest_memcpy&quot;</span>);</span><br><span class="line">assert(ref_difftest_memcpy);</span><br><span class="line"></span><br><span class="line">ref_difftest_regcpy = dlsym(handle, <span class="string">&quot;difftest_regcpy&quot;</span>);</span><br><span class="line">assert(ref_difftest_regcpy);</span><br><span class="line"></span><br><span class="line">ref_difftest_exec = dlsym(handle, <span class="string">&quot;difftest_exec&quot;</span>);</span><br><span class="line">assert(ref_difftest_exec);</span><br><span class="line"></span><br><span class="line">ref_difftest_raise_intr = dlsym(handle, <span class="string">&quot;difftest_raise_intr&quot;</span>);</span><br><span class="line">assert(ref_difftest_raise_intr);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> (*ref_difftest_init)(<span class="type">int</span>) = dlsym(handle, <span class="string">&quot;difftest_init&quot;</span>);</span><br><span class="line">assert(ref_difftest_init);</span><br></pre></td></tr></table></figure><ul><li><code>dlsym</code>函数用于获取共享库中指定符号的地址，这里使用<code>handle</code>（从<code>dlopen</code>获得）和符号名（如<code>&quot;difftest_memcpy&quot;</code>）作为参数。如果找不到符号，返回<code>NULL</code>。</li><li>每个<code>ref_difftest_</code>变量都保存了对应函数的地址，可以像普通函数指针那样使用这些变量来调用共享库中的函数。</li><li>使用<code>assert</code>来确保每个符号都成功获取，如果任何<code>dlsym</code>调用返回<code>NULL</code>，则<code>assert</code>会导致程序终止。</li></ul><p>这种技术使得程序能够在运行时动态地加载和使用共享库，提供了极大的灵活性。它允许应用程序在不直接链接到某个库的情况下使用该库的功能，也便于实现插件机制或模块化设计。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;在C语言中，不同的&lt;code&gt;.c&lt;/code&gt;文件（编译单元）之间相互调用函数和访问变量需要正确地使用&lt;code&gt;extern&lt;/code&gt;、&lt;code&gt;static&lt;/code&gt;和&lt;code&gt;inline&lt;/code&gt;等</summary>
      
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="开发" scheme="http://example.com/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="C/C++" scheme="http://example.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>riscv启动</title>
    <link href="http://example.com/2024/02/14/riscv%E5%90%AF%E5%8A%A8/"/>
    <id>http://example.com/2024/02/14/riscv%E5%90%AF%E5%8A%A8/</id>
    <published>2024-02-14T09:48:24.000Z</published>
    <updated>2024-04-09T05:39:18.944Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h2><p><a href="https://buildroot.org/">https://buildroot.org/</a><br><a href="https://github.com/riscv-software-src/opensbi">https://github.com/riscv-software-src/opensbi</a><br><a href="https://github.com/u-boot/u-boot">https://github.com/u-boot/u-boot</a><br><a href="https://kernel.org/">https://kernel.org/</a></p><p>为了通过 U-Boot 启动 RISC-V 64 架构的 Linux，我们需要在编译时选择交叉编译工具链 riscv64-linux-gnu-gcc。在 U-Boot 目录下执行以下命令：<br>    $ cd u-boot<br>    $ export CROSS_COMPILE&#x3D;riscv64-linux-gnu-<br>    $ make qemu-riscv64_smode_defconfig<br>    $ make -j $(nproc)</p><p>直接引导 S 模式下的 U-Boot 镜像，使用以下命令：</p><pre><code>$ qemu-system-riscv64 -M virt -smp 4 -m 2G \    -display none -serial stdio \    -kernel /path/to/u-boot.bin</code></pre><h2 id="FW-PAYLOAD"><a href="#FW-PAYLOAD" class="headerlink" title="FW_PAYLOAD"></a>FW_PAYLOAD</h2><p>如需启动 U-Boot 或 Linux，需要在 OpenSBI 编译时指定 U-Boot 或 Linux 的 payload 路径。以 U-Boot 为例，切换到 OpenSBI 目录下，编译命令如下：<br>    $ cd opensbi<br>    $ export CROSS_COMPILE&#x3D;riscv64-linux-gnu-<br>    $ make PLATFORM&#x3D;generic FW_PAYLOAD_PATH&#x3D;<uboot_build_directory>&#x2F;u-boot.bin</p><p>运行：</p><pre><code>$ qemu-system-riscv64 -M virt -m 256M -nographic \    -bios build/platform/generic/firmware/fw_payload.elf</code></pre><h2 id="FW-JUMP"><a href="#FW-JUMP" class="headerlink" title="FW_JUMP"></a>FW_JUMP</h2><p>或是使用以下命令运行：</p><pre><code>$ qemu-system-riscv64 -M virt -m 256M -nographic \    -bios build/platform/generic/firmware/fw_jump.bin \    -kernel &lt;uboot_build_directory&gt;/u-boot.bin</code></pre><h2 id="FW-DYNAMIC"><a href="#FW-DYNAMIC" class="headerlink" title="FW_DYNAMIC"></a>FW_DYNAMIC</h2><p>如果要使用 U-Boot SPL，使用如下命令：<br>    $ cd u-boot<br>    $ export CROSS_COMPILE&#x3D;riscv64-linux-gnu-</p><pre><code>$ export OPENSBI=/path/to/opensbi/build/platform/generic/firmware/fw_dynamic.bin$ make qemu-riscv64_spl_defconfig$ make -j $(nproc)$ qemu-system-riscv64 -M virt -smp 4 -m 2G \    -display none -serial stdio \    -bios /path/to/u-boot-spl \    -device loader,file=/path/to/u-boot.itb,addr=0x80200000</code></pre><p>opensbi<br>固件和负载（Payload）文件<br>fw_dynamic.bin &#x2F; fw_jump.bin &#x2F; fw_payload.bin: 这些.bin文件是二进制格式的固件或负载文件，可以直接烧录到目标设备的Flash存储或通过引导加载程序（如U-Boot）加载。它们分别可能代表动态固件、跳转固件（用于引导加载程序中跳转到特定地址执行）、以及具体的负载（如操作系统内核、应用程序或服务）。<br>fw_dynamic.elf &#x2F; fw_jump.elf &#x2F; fw_payload.elf: .elf文件是可执行链接格式（Executable and Linkable Format）文件，它们包含了用于调试和执行的代码和数据，以及关于如何在目标系统上布局这些代码和数据的信息。ELF文件在开发过程中用于调试目的，因为它们包含了丰富的调试信息。<br>依赖和链接脚本文件<br>fw_dynamic.dep &#x2F; fw_jump.dep &#x2F; fw_payload.dep: .dep文件通常包含关于源文件之间依赖关系的信息。在构建过程中，这些依赖信息被用来确定哪些文件需要重新编译。这些文件对于管理大型项目中的依赖关系非常有用。<br>fw_dynamic.elf.dep &#x2F; fw_jump.elf.dep &#x2F; fw_payload.elf.dep: 这些文件可能包含了特定于ELF文件的依赖信息，指明了构建ELF文件所需的依赖项。<br>fw_dynamic.elf.ld &#x2F; fw_jump.elf.ld &#x2F; fw_payload.elf.ld: .ld文件是链接脚本，用于控制ELF文件的链接过程，包括指定各个代码和数据段在目标内存中的布局。这对于确保固件或负载正确地放置在目标设备的内存中非常重要。<br>对象文件<br>fw_dynamic.o &#x2F; fw_jump.o &#x2F; fw_payload.o: .o文件是对象文件，包含编译单个源文件后的机器代码和数据。在最终链接阶段，这些对象文件被合并生成最终的可执行文件或二进制固件。<br>负载目录<br>payloads: 这个目录可能包含一系列负载文件，这些文件可以是操作系统映像、应用程序或其他为特定目的准备的代码。在引导加载程序中，可以选择从这些负载中加载特定项。</p><p>u-boot<br>u-boot：这是U-Boot的主可执行文件，通常为未压缩的ELF（Executable and Linkable Format）格式。<br>u-boot.bin：这是u-boot的二进制格式，通过将ELF文件中的可执行代码提取并转换成纯二进制数据得到。通常用于烧录到目标设备的引导存储器中。<br>u-boot.cfg：U-Boot的配置文件，包含了编译U-Boot时的配置选项。<br>u-boot.dtb（Device Tree Blob）：设备树文件，包含了硬件设备的结构和配置信息，U-Boot使用它来了解硬件的详细信息。<br>u-boot-dtb.bin：这是包含了设备树信息的u-boot.bin文件。它将U-Boot和对应的设备树合并为一个二进制文件。<br>u-boot-dtb.img：同u-boot-dtb.bin，是一个包含了设备树的U-Boot镜像，格式和用途可能略有不同，具体取决于构建系统。<br>u-boot.dtb.out：可能是在构建过程中生成的包含设备树的中间文件，用于调试或进一步处理。<br>u-boot.img：通常是一个为特定平台准备的U-Boot镜像，格式可能是二进制或其他特定格式。<br>u-boot.itb（Image Tree Blob）：一个FIT（Flattened Image Tree）格式的镜像，可以包含U-Boot、设备树和其他数据（如内核映像）。<br>u-boot.lds：链接脚本，用于控制U-Boot可执行文件的内存布局。<br>u-boot.map：生成的映射文件，详细列出了U-Boot中符号的地址和布局。<br>u-boot-nodtb.bin：这是不包含设备树信息的u-boot.bin文件，适用于系统不需要在引导加载程序阶段使用设备树的场景。<br>u-boot-spl.dtb.out：U-Boot的第二阶段加载程序（SPL）的设备树中间文件，用于较小的引导阶段。<br>u-boot.srec：SREC（S-record）格式的U-Boot文件，是一种用于表示二进制数据的ASCII文本格式。<br>u-boot.sym：符号文件，列出了U-Boot所有符号及其地址，有助于调试。</p><p>u-boot&#x2F;spl<br>u-boot.cfg: 这是U-Boot构建过程中生成的配置文件，包含了编译U-Boot时使用的配置选项。它由make menuconfig、make savedefconfig等命令生成或修改。<br>u-boot-spl: 这可能是U-Boot的第一阶段引导加载程序（SPL）的未压缩的可执行文件。具体格式（如ELF格式）取决于构建配置。<br>u-boot-spl.bin: 这是u-boot-spl的二进制格式文件，通常通过将u-boot-spl的可执行文件转换成纯二进制形式来生成。这个文件适合直接烧录到启动介质（如SD卡、NOR Flash等）。<br>u-boot-spl.dtb: 设备树二进制文件（Device Tree Blob），包含了U-Boot SPL需要的硬件配置和布局信息。在某些系统上，SPL可能需要加载设备树来正确初始化硬件。<br>u-boot-spl-dtb.bin: 这是一个合并了设备树信息的u-boot-spl.bin文件。它将SPL和对应的设备树合并为一个单一的二进制文件，便于加载和执行。<br>u-boot-spl.lds: U-Boot SPL的链接脚本（Linker Script），定义了SPL二进制文件的内存布局。链接脚本指导链接器如何将代码和数据段映射到目标系统的地址空间。<br>u-boot-spl.map: 这是构建过程生成的内存映射文件，列出了SPL中所有符号的地址和布局信息。这对于调试和分析SPL非常有用。<br>u-boot-spl-nodtb.bin: 这是一个不包含设备树的u-boot-spl.bin文件。在系统中如果设备树以另一种方式提供（如通过另一个分区或在主U-Boot映像中），则可能会使用此版本。<br>u-boot-spl.sym: 符号文件，包含了SPL构建过程中生成的所有符号及其地址。这对于开发者在调试阶段定位问题非常有帮助。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;网址&quot;&gt;&lt;a href=&quot;#网址&quot; class=&quot;headerlink&quot; title=&quot;网址&quot;&gt;&lt;/a&gt;网址&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://buildroot.org/&quot;&gt;https://buil</summary>
      
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="riscv" scheme="http://example.com/tags/riscv/"/>
    
    <category term="安全" scheme="http://example.com/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>cpp的特性</title>
    <link href="http://example.com/2024/02/10/cpp%E7%9A%84%E7%89%B9%E6%80%A7/"/>
    <id>http://example.com/2024/02/10/cpp%E7%9A%84%E7%89%B9%E6%80%A7/</id>
    <published>2024-02-10T15:56:45.000Z</published>
    <updated>2024-02-17T07:46:39.087Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="attribute"><a href="#attribute" class="headerlink" title="attribute"></a><strong>attribute</strong></h2><p><strong>attribute__的基本语法是在声明的末尾添加__attribute</strong>((属性名))，其中“属性名”可以是一个或多个指定给编译器的属性，属性之间用逗号分隔。<br>eg:<br>unused：告诉编译器某个变量或函数可能未被使用，以避免编译时出现未使用警告。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">static __attribute__((unused))</span><br><span class="line">int ioctl(int fd, unsigned long req, void *value)</span><br><span class="line">&#123;</span><br><span class="line">int ret = sys_ioctl(fd, req, value);</span><br><span class="line"></span><br><span class="line">if (ret &lt; 0) &#123;</span><br><span class="line">SET_ERRNO(-ret);</span><br><span class="line">ret = -1;</span><br><span class="line">&#125;</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>noinline：阻止编译器内联某个函数，即使开启了优化。<br>void my_function(void) <strong>attribute</strong>((noinline));</p><p>pure：指示函数是“纯”的，即函数的返回值仅依赖于输入参数且没有副作用，这允许编译器进行更多的优化。</p><p>aligned(x)：强制变量或类型实例按照x字节对齐。</p><p>constructor 和 destructor：分别指示函数应在main函数执行前和执行后调用。</p><h2 id="virtual"><a href="#virtual" class="headerlink" title="virtual"></a>virtual</h2><p>在C++中，virtual uintptr_t initUTM(size_t size);声明了一个虚拟成员函数initUTM，这个函数预期在一个类中被声明，并且可能在派生类中被重写。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">class Base &#123;</span><br><span class="line">public:</span><br><span class="line">    virtual void print() &#123;</span><br><span class="line">        std::cout &lt;&lt; &quot;Base class print function&quot; &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">class Derived : public Base &#123;</span><br><span class="line">public:</span><br><span class="line">    void print() override &#123;  // 使用override确保重写</span><br><span class="line">        std::cout &lt;&lt; &quot;Derived class print function&quot; &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">int main() &#123;</span><br><span class="line">    Base* b = new Derived();</span><br><span class="line">    b-&gt;print();  // 输出：Derived class print function</span><br><span class="line">    </span><br><span class="line">    delete b;  // 清理资源</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;attribute&quot;&gt;&lt;a href=&quot;#attribute&quot; class=&quot;headerlink&quot; title=&quot;attribute&quot;&gt;&lt;/a&gt;&lt;strong&gt;attribute&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;</summary>
      
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="开发" scheme="http://example.com/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="C/C++" scheme="http://example.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>makefile的常用操作</title>
    <link href="http://example.com/2024/02/10/makefile%E7%9A%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2024/02/10/makefile%E7%9A%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2024-02-10T15:53:00.000Z</published>
    <updated>2024-02-15T10:14:08.467Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><p>如何将多个对象文件（.o文件，由${OBJS}变量表示）链接成一个可执行文件（os.elf），然后将该可执行文件转换成二进制格式的镜像文件（os.bin）<br>os.elf: ${OBJS}<br>    ${CC} ${CFLAGS} -T os.ld -o os.elf $^<br>    ${OBJCOPY} -O binary os.elf os.bin</p><p>-T os.ld：指定链接脚本os.ld。链接脚本用于控制链接过程，如指定各个段（如代码段、数据段）的位置。<br>-o os.elf：指定输出文件的名称为os.elf。<br>$^：这是Makefile的自动变量，表示所有的依赖项，这里指${OBJS}变量中列出的所有对象文件。</p><p>${OBJCOPY}：这是GNU Binutils工具集中objcopy程序的变量，用于进行文件格式转换。<br>-O binary：指定输出格式为二进制。objcopy可以将ELF格式（或其他格式）的文件转换为纯二进制格式，这对于裸机程序来说是必需的，因为硬件通常直接执行二进制代码。<br>os.elf：输入文件，即上一步生成的ELF格式的可执行文件。<br>os.bin：输出文件，转换成二进制格式后的文件名。</p><h4 id="定义编译核心数"><a href="#定义编译核心数" class="headerlink" title="定义编译核心数"></a>定义编译核心数</h4><p>NPROC:&#x3D; $(shell nproc 2&gt;&#x2F;dev&#x2F;null || echo 1)</p><p>这行Makefile代码定义了一个变量NPROC，它的目的是确定可以用于并行编译的处理器（CPU核心）数量。这个变量通常用于make命令的-j选项，以加速编译过程。让我们分解这行代码的各个部分：</p><p>$(shell …)：shell函数执行一个Shell命令，并将输出作为结果返回。在这个上下文中，它尝试执行nproc命令。</p><p>nproc：这是一个在多种Unix-like系统上可用的命令，用于打印系统上可用的处理单元数量（通常是CPU核心数量）。它是确定可用于并行编译作业数的常用方法。</p><p>2&gt;&#x2F;dev&#x2F;null：这部分将标准错误（stderr）重定向到&#x2F;dev&#x2F;null，意味着如果命令失败（例如，在某些环境中nproc命令不存在），错误信息不会被显示。</p><p>|| echo 1：这是一个逻辑或操作，如果nproc命令执行失败（返回非零退出状态），则执行echo 1。这意味着如果无法确定处理器数量，就假设只有1个可用的处理单元。</p><p>:&#x3D;$(shell …)：使用:&#x3D;进行变量赋值表示立即求值，这意味着NPROC变量将在Makefile解析时被设置为nproc命令的输出，或者在nproc不可用的情况下被设置为1。</p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>这些是GCC编译器的选项，用于控制编译过程的各个方面。以下是每个选项的简要解释：</p><h5 id="MMD"><a href="#MMD" class="headerlink" title="-MMD"></a><code>-MMD</code></h5><p>这个选项告诉编译器为每个源文件生成一个<code>.d</code>文件，其中包含了源文件中包含的头文件列表。这对于make工具自动解析文件依赖关系非常有用，帮助确保当头文件改变时，相关的源文件会被重新编译。</p><h5 id="Werror"><a href="#Werror" class="headerlink" title="-Werror"></a><code>-Werror</code></h5><p>将所有的警告转化为错误。这意味着，如果编译器发现任何警告，它将停止编译过程，并将这些警告视为错误处理。这有助于维持代码质量，确保开发者不会忽略编译器的警告。</p><h5 id="fno-asynchronous-unwind-tables"><a href="#fno-asynchronous-unwind-tables" class="headerlink" title="-fno-asynchronous-unwind-tables"></a><code>-fno-asynchronous-unwind-tables</code></h5><p>禁用生成异步异常展开表。这会减小生成的二进制文件大小，但可能会影响异常处理和程序调试。</p><h5 id="fno-builtin"><a href="#fno-builtin" class="headerlink" title="-fno-builtin"></a><code>-fno-builtin</code></h5><p>告诉编译器不要认为任何函数是内建的，即使编译器有内建的优化版本。这确保了对函数的调用不会被替换为编译器的内建版本，有助于避免潜在的优化导致的问题。</p><h5 id="fno-stack-protector"><a href="#fno-stack-protector" class="headerlink" title="-fno-stack-protector"></a><code>-fno-stack-protector</code></h5><p>禁用栈保护。默认情况下，GCC会为防止栈溢出攻击而插入特殊的安全检查代码。使用这个选项会禁用这些检查，可能会使得程序更容易受到栈溢出攻击。</p><h5 id="Wno-main"><a href="#Wno-main" class="headerlink" title="-Wno-main"></a><code>-Wno-main</code></h5><p>禁止关于<code>main</code>函数的警告。正常情况下，如果编译器发现<code>main</code>函数的声明不符合标准，会发出警告。这个选项会禁止这类警告。</p><h5 id="U-FORTIFY-SOURCE"><a href="#U-FORTIFY-SOURCE" class="headerlink" title="-U_FORTIFY_SOURCE"></a><code>-U_FORTIFY_SOURCE</code></h5><p>取消定义宏<code>_FORTIFY_SOURCE</code>。当定义了<code>_FORTIFY_SOURCE</code>宏时，GCC会启用一些额外的检查来防止缓冲区溢出等问题。使用<code>-U_FORTIFY_SOURCE</code>可以取消这些额外的检查。</p><h5 id="fvisibility-hidden"><a href="#fvisibility-hidden" class="headerlink" title="-fvisibility=hidden"></a><code>-fvisibility=hidden</code></h5><p>设置默认的符号可见性为隐藏。这意味着，除非显式地标记为可见，否则链接时不会导出符号。这有助于减小最终二进制文件的大小，并可能改善加载时间和防止符号冲突。</p><p>这些选项通常在构建需要精细控制编译过程的项目时使用，如操作系统内核、嵌入式系统或安全敏感的应用程序。它们有助于优化生成的代码，增强安全性和性能。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>在Makefile中，GNU <code>make</code> 提供了一系列内置函数，用于处理文件名、目标对象和依赖项。这些函数可以帮助你简化规则的书写、处理字符串和文件名、以及执行列表的操作等。以下是一些处理目标对象时常用的函数：</p><h3 id="1-patsubst-pattern-replacement-text"><a href="#1-patsubst-pattern-replacement-text" class="headerlink" title="1. $(patsubst pattern,replacement,text)"></a>1. <code>$(patsubst pattern,replacement,text)</code></h3><p>用于模式字符串替换。它搜索<code>text</code>中的单词，将符合<code>pattern</code>的部分替换为<code>replacement</code>。</p><p>例子：将所有的<code>.c</code>文件扩展名替换为<code>.o</code>。</p><figure class="highlight make"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OBJS := <span class="variable">$(<span class="built_in">patsubst</span> %.c,%.o,<span class="variable">$(SRCS)</span>)</span></span><br></pre></td></tr></table></figure><h3 id="2-wildcard-pattern"><a href="#2-wildcard-pattern" class="headerlink" title="2. $(wildcard pattern)"></a>2. <code>$(wildcard pattern)</code></h3><p>用于匹配符合<code>pattern</code>的文件名。</p><p>例子：获取当前目录下所有的<code>.c</code>文件。</p><figure class="highlight make"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SRCS := <span class="variable">$(<span class="built_in">wildcard</span> *.c)</span></span><br></pre></td></tr></table></figure><h3 id="3-dir-names"><a href="#3-dir-names" class="headerlink" title="3. $(dir names...)"></a>3. <code>$(dir names...)</code></h3><p>提取文件名列表<code>names</code>中每个文件的目录部分。</p><p>例子：获取所有源文件的目录。</p><figure class="highlight make"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SRC_DIRS := <span class="variable">$(<span class="built_in">dir</span> <span class="variable">$(SRCS)</span>)</span></span><br></pre></td></tr></table></figure><h3 id="4-notdir-names"><a href="#4-notdir-names" class="headerlink" title="4. $(notdir names...)"></a>4. <code>$(notdir names...)</code></h3><p>从文件名列表<code>names</code>中去除所有的目录部分，只留下文件名。</p><p>例子：从完整路径列表中提取文件名。</p><figure class="highlight make"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SRC_FILES := <span class="variable">$(<span class="built_in">notdir</span> <span class="variable">$(SRCS)</span>)</span></span><br></pre></td></tr></table></figure><h3 id="5-addprefix-prefix-names"><a href="#5-addprefix-prefix-names" class="headerlink" title="5. $(addprefix prefix,names...)"></a>5. <code>$(addprefix prefix,names...)</code></h3><p>给<code>names</code>列表中的每个单词添加前缀<code>prefix</code>。</p><p>例子：给所有目标文件添加路径前缀。</p><figure class="highlight make"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OBJS := <span class="variable">$(<span class="built_in">addprefix</span> obj/,$(<span class="built_in">notdir</span> $(SRCS:.c=.o)</span>))</span><br></pre></td></tr></table></figure><h3 id="6-addsuffix-suffix-names"><a href="#6-addsuffix-suffix-names" class="headerlink" title="6. $(addsuffix suffix,names...)"></a>6. <code>$(addsuffix suffix,names...)</code></h3><p>给<code>names</code>列表中的每个单词添加后缀<code>suffix</code>。</p><p>例子：给所有模块名添加<code>.o</code>后缀。</p><figure class="highlight make"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MOD_OBJS := <span class="variable">$(<span class="built_in">addsuffix</span> .o,<span class="variable">$(MODULES)</span>)</span></span><br></pre></td></tr></table></figure><h3 id="7-filter-pattern-text"><a href="#7-filter-pattern-text" class="headerlink" title="7. $(filter pattern...,text)"></a>7. <code>$(filter pattern...,text)</code></h3><p>从<code>text</code>中选择符合<code>pattern</code>的单词。</p><p>例子：从所有文件中筛选出<code>.c</code>和<code>.h</code>文件。</p><figure class="highlight make"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C_AND_H_FILES := <span class="variable">$(<span class="built_in">filter</span> %.c %.h,<span class="variable">$(FILES)</span>)</span></span><br></pre></td></tr></table></figure><h3 id="8-filter-out-pattern-text"><a href="#8-filter-out-pattern-text" class="headerlink" title="8. $(filter-out pattern...,text)"></a>8. <code>$(filter-out pattern...,text)</code></h3><p>从<code>text</code>中去除符合<code>pattern</code>的单词。</p><p>例子：从所有文件中去除<code>.o</code>文件。</p><figure class="highlight make"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NON_O_FILES := <span class="variable">$(<span class="built_in">filter</span>-out %.o,<span class="variable">$(FILES)</span>)</span></span><br></pre></td></tr></table></figure><h3 id="9-sort-list"><a href="#9-sort-list" class="headerlink" title="9. $(sort list)"></a>9. <code>$(sort list)</code></h3><p>将<code>list</code>中的单词排序并去除重复的单词。</p><p>例子：排序并去重源文件列表。</p><figure class="highlight make"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UNIQUE_SRCS := <span class="variable">$(<span class="built_in">sort</span> <span class="variable">$(SRCS)</span>)</span></span><br></pre></td></tr></table></figure><h3 id="10-foreach-var-list-text"><a href="#10-foreach-var-list-text" class="headerlink" title="10. $(foreach var,list,text)"></a>10. <code>$(foreach var,list,text)</code></h3><p>对<code>list</code>中的每个单词执行<code>text</code>中的表达式，其中<code>var</code>作为当前单词的变量。</p><p>例子：为每个源文件打印一条编译信息。</p><figure class="highlight make"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">foreach</span> src,<span class="variable">$(SRCS)</span>,echo Compiling <span class="variable">$(src)</span>;)</span></span><br></pre></td></tr></table></figure><p>在Makefile中，使用一些高效的表达式和技巧可以大大提高构建系统的灵活性和可维护性。以下是一些常用的表达式和技巧，它们可以帮助你更有效地编写Makefile。</p><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><h3 id="1-使用变量简化文件列表"><a href="#1-使用变量简化文件列表" class="headerlink" title="1. 使用变量简化文件列表"></a>1. 使用变量简化文件列表</h3><p>定义变量来简化文件列表的管理，使得在多个地方引用时不需要重复书写。</p><figure class="highlight make"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SRCS := main.c foo.c bar.c</span><br><span class="line">OBJS := $(SRCS:.c=.o)</span><br></pre></td></tr></table></figure><p>这里，<code>.c</code>文件列表被赋值给<code>SRCS</code>变量，然后使用模式替换将<code>.c</code>后缀替换为<code>.o</code>生成对象文件列表，并赋值给<code>OBJS</code>变量。</p><h3 id="2-使用通配符自动获取文件列表"><a href="#2-使用通配符自动获取文件列表" class="headerlink" title="2. 使用通配符自动获取文件列表"></a>2. 使用通配符自动获取文件列表</h3><p>使用<code>wildcard</code>函数自动获取目录下的文件列表，避免手动列出。</p><figure class="highlight make"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SRCS := <span class="variable">$(<span class="built_in">wildcard</span> src/*.c)</span></span><br><span class="line">OBJS := $(SRCS:.c=.o)</span><br></pre></td></tr></table></figure><h3 id="3-自动变量简化规则"><a href="#3-自动变量简化规则" class="headerlink" title="3. 自动变量简化规则"></a>3. 自动变量简化规则</h3><p>使用自动变量简化规则的书写。例如<code>$@</code>代表规则的目标，<code>$&lt;</code>代表第一个依赖，<code>$^</code>代表所有依赖。</p><figure class="highlight make"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">app: <span class="variable">$(OBJS)</span></span></span><br><span class="line"><span class="variable">$(CC)</span> -o <span class="variable">$@</span> <span class="variable">$^</span></span><br></pre></td></tr></table></figure><h3 id="4-使用模式规则"><a href="#4-使用模式规则" class="headerlink" title="4. 使用模式规则"></a>4. 使用模式规则</h3><p>模式规则可以应用于匹配模式的目标，使得规则更加通用。</p><figure class="highlight make"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">%.o: %.c</span></span><br><span class="line"><span class="variable">$(CC)</span> -c <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br></pre></td></tr></table></figure><p>这条规则表示任何<code>.o</code>文件都依赖于同名的<code>.c</code>文件，并描述了如何从<code>.c</code>文件构建<code>.o</code>文件。</p><p>$*，表示不带前缀的目标名称）<br>$&lt;，表示规则的第一个依赖</p><h3 id="5-条件判断"><a href="#5-条件判断" class="headerlink" title="5. 条件判断"></a>5. 条件判断</h3><p>使用条件判断来根据不同的条件选择不同的操作。</p><figure class="highlight make"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ifeq</span> (<span class="variable">$(DEBUG)</span>,yes)</span><br><span class="line">CFLAGS += -g</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">CFLAGS += -O2</span><br><span class="line"><span class="keyword">endif</span></span><br></pre></td></tr></table></figure><p>根据<code>DEBUG</code>变量的值，调整编译标志。</p><h3 id="6-函数使用"><a href="#6-函数使用" class="headerlink" title="6. 函数使用"></a>6. 函数使用</h3><p>Makefile提供了许多内置函数，如<code>filter</code>、<code>patsubst</code>等，用于处理文本和文件名。</p><figure class="highlight make"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DEBUG_SRCS := <span class="variable">$(<span class="built_in">filter</span> %_debug.c,<span class="variable">$(SRCS)</span>)</span></span><br><span class="line">RELEASE_SRCS := <span class="variable">$(<span class="built_in">filter</span>-out %_debug.c,<span class="variable">$(SRCS)</span>)</span></span><br></pre></td></tr></table></figure><p>使用<code>filter</code>和<code>filter-out</code>函数来区分调试和发布的源文件。</p><h3 id="8-多目标规则"><a href="#8-多目标规则" class="headerlink" title="8. 多目标规则"></a>8. 多目标规则</h3><p>一个规则可以有多个目标，用于执行相同的命令序列构建多个目标。</p><figure class="highlight make"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">all: prog1 prog2</span></span><br></pre></td></tr></table></figure><h3 id="9-PHONY目标"><a href="#9-PHONY目标" class="headerlink" title="9. .PHONY目标"></a>9. .PHONY目标</h3><p>使用<code>.PHONY</code>声明伪目标，以避免与同名文件冲突。</p><figure class="highlight make"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -f <span class="variable">$(OBJS)</span> app</span><br></pre></td></tr></table></figure><p>在Makefile中，处理字符串和变量的几个有用概念包括子集（<code>subset</code>）、单词（<code>word</code>）操作和变量类型的检查（<code>flavor</code>）。虽然Makefile本身不直接提供名为<code>subset</code>的函数，但是可以通过组合使用其他函数来实现子集选择等操作。下面是对<code>word</code>函数和<code>flavor</code>函数的解释，以及如何模拟实现子集选择的示例。</p><p>在Makefile中，$(subst from,to,text)函数用于文本替换，它在text字符串中将所有出现的from字符串替换为to字符串。在你提供的表达式：</p><figure class="highlight make"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ARCH_SPLIT = <span class="variable">$(<span class="built_in">subst</span> -, ,<span class="variable">$(ARCH)</span>)</span></span><br></pre></td></tr></table></figure><p>这行代码的作用是将变量ARCH中的所有破折号（-）替换为空格。这种替换通常用于处理类似于x86_64-linux-gnu这样的复合体系结构名称或其他用破折号连接的字符串，目的是将它们拆分为由空格分隔的单词列表，以便于后续操作或查询。</p><h3 id="word-函数"><a href="#word-函数" class="headerlink" title="word 函数"></a>word 函数</h3><p><code>word</code>函数用于从以空格分隔的单词列表中选取第<code>n</code>个单词。其语法如下：</p><figure class="highlight make"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">word</span> n,text)</span></span><br></pre></td></tr></table></figure><ul><li><code>n</code>是要选取的单词的位置（从1开始计数）。</li><li><code>text</code>是单词列表。</li></ul><p>例如，如果你有一个文件列表，想要选取第二个文件名，可以这样做：</p><figure class="highlight make"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FILES := file1.c file2.c file3.c</span><br><span class="line">SECOND_FILE := <span class="variable">$(<span class="built_in">word</span> 2,<span class="variable">$(FILES)</span>)</span></span><br></pre></td></tr></table></figure><p>这里，<code>SECOND_FILE</code>的值将是<code>file2.c</code>。</p><h3 id="flavor-函数"><a href="#flavor-函数" class="headerlink" title="flavor 函数"></a>flavor 函数</h3><p><code>flavor</code>函数用于查询变量的类型。Makefile中的变量可以是简单展开的（<code>simple</code>）、递归展开的（<code>recursive</code>）、环境变量（<code>environment</code>）、命令行定义的（<code>command line</code>）等。</p><figure class="highlight make"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$(<span class="built_in">flavor</span> variable-name)</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight make"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">VAR := simple</span><br><span class="line">VAR2 = recursive</span><br><span class="line"><span class="variable">$(info $(<span class="built_in">flavor</span> VAR)</span>)  <span class="comment"># 输出 simple</span></span><br><span class="line"><span class="variable">$(info $(<span class="built_in">flavor</span> VAR2)</span>) <span class="comment"># 输出 recursive</span></span><br></pre></td></tr></table></figure><h3 id="override"><a href="#override" class="headerlink" title="override"></a>override</h3><p>override ARGS ?&#x3D; …行使用了条件赋值操作符?&#x3D;, 它只在ARGS未定义时设置值。override关键字用于确保即使在命令行中定义了ARGS变量，这个赋值也会生效。</p><h3 id=""><a href="#" class="headerlink" title="::"></a>::</h3><p>$(BINARY):: compile_git<br>这里定义了一个目标$(BINARY)，它有一个额外的依赖compile_git。$(BINARY)很可能是一个变量，表示要构建的二进制文件的名字。使用::而不是单个:定义规则，表示这是一个终端规则（Terminal Rule），它允许同一个目标有多个独立的规则定义，这些规则都会被执行。</p><h2 id="MAKE"><a href="#MAKE" class="headerlink" title="$(MAKE)"></a>$(MAKE)</h2><p>$(MAKE) -C $(NEMU_HOME):</p><p>$(MAKE)是一个特殊变量，代表make工具的名称，通常就是make。这允许在Makefile中递归地调用make。<br>-C $(NEMU_HOME)选项告诉make更改到目录$(NEMU_HOME)然后执行后续的make操作。$(NEMU_HOME)应该是一个变量，它指定了NEMU（一个可能的模拟器或工具链）的根目录。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;编译&quot;&gt;&lt;a href=&quot;#编译&quot; class=&quot;headerlink&quot; title=&quot;编译&quot;&gt;&lt;/a&gt;编译&lt;/h2&gt;&lt;h4 id=&quot;基本操作&quot;&gt;&lt;a href=&quot;#基本操作&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="开发" scheme="http://example.com/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>vscode的常用操作</title>
    <link href="http://example.com/2024/02/07/vscode%E7%9A%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2024/02/07/vscode%E7%9A%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2024-02-07T04:22:12.000Z</published>
    <updated>2024-02-07T04:23:15.766Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>A: 你本地新增的文件（服务器上没有）.<br>C: 文件的一个新拷贝.<br>D: 你本地删除的文件（服务器上还在）.<br>M: 文件的内容或者mode被修改了.<br>R: 文件名被修改了。<br>T: 文件的类型被修改了。<br>U: 文件没有被合并(你需要完成合并才能进行提交)。<br>X: 未知状态(很可能是遇到git的bug了，你可以向git提交bug report)。<br>在man git diff-files中可以查到这些标志的说明。<br>这些状态标志在git的源代码的diff.h文件中被定义。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;


&lt;p&gt;A: 你本地新增的文件（服务器上没有）.&lt;br&gt;C: 文件的一个新拷贝.&lt;br&gt;D: 你本地删除的文件（服务器上还在）.&lt;br&gt;M: 文件的内容或者mode被修改了.&lt;br&gt;R: 文件名被修改了。&lt;br&gt;T: 文件的类型被</summary>
      
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="开发" scheme="http://example.com/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>c语言的常用函数</title>
    <link href="http://example.com/2024/02/05/c%E8%AF%AD%E8%A8%80%E7%9A%84%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2024/02/05/c%E8%AF%AD%E8%A8%80%E7%9A%84%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</id>
    <published>2024-02-05T12:28:18.000Z</published>
    <updated>2024-02-17T07:46:40.174Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="1-getopt-long"><a href="#1-getopt-long" class="headerlink" title="1.getopt_long"></a>1.getopt_long</h2><h4 id="函数定义："><a href="#函数定义：" class="headerlink" title="函数定义："></a>函数定义：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;getopt.h&gt;</span><br><span class="line">int getopt_long(int argc, char *argv[],</span><br><span class="line">  const char *optstring,</span><br><span class="line">  const struct option *longopts, int *longindex);</span><br></pre></td></tr></table></figure><p>函数是用于解析命令行参数的，与函数 getopt() 函数是相似的，它可以处理长选项，即两个短杠”–” 连接的参数选项。而且比 getopt() 多两个参数。</p><h4 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h4><p>1，argc        一般就是 main 函数里的 argc<br>2，argv    同上<br>3，optstring  要匹配的参数，如：”ha” 或  “h:a” 或 “h:a::”，带一个冒号的表示此选项须带参数，两个冒号的表示是可选参数<br>4，longopts 这个是长选项结构的指针，一般传的是数组<br>5，longindex  如果不为空，它将指向 longopts 的一个元素的位置，即longopts的数组下标</p><h4 id="man手册例子："><a href="#man手册例子：" class="headerlink" title="man手册例子："></a>man手册例子：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;getopt.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;     /* for printf */</span><br><span class="line">#include &lt;stdlib.h&gt;    /* for exit */</span><br><span class="line"> </span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">int c;</span><br><span class="line">int digit_optind = 0;</span><br><span class="line"> </span><br><span class="line">while (1) &#123;</span><br><span class="line">int this_option_optind = optind ? optind : 1;</span><br><span class="line">int option_index = 0;</span><br><span class="line"></span><br><span class="line">/*长选项的匹配只要匹配到前n个字符相同就会返回，若是模棱两可时会返回？，同时stderr会有相应打印*/</span><br><span class="line">static struct option long_options[] = &#123;</span><br><span class="line">   &#123;&quot;add&quot;,     required_argument, 0,  0 &#125;,</span><br><span class="line">   &#123;&quot;append&quot;,  no_argument,       0,  0 &#125;,</span><br><span class="line">   &#123;&quot;delete&quot;,  required_argument, 0,  0 &#125;,</span><br><span class="line">   &#123;&quot;verbose&quot;, no_argument,       0,  0 &#125;,</span><br><span class="line">   &#123;&quot;create&quot;,  required_argument, 0, &#x27;c&#x27;&#125;,</span><br><span class="line">   &#123;&quot;file&quot;,    required_argument, 0,  0 &#125;,</span><br><span class="line">   &#123;0,         0,                 0,  0 &#125;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">/*短选项跟一个冒号表示有选项参数，两个冒号表示选项参数可选*/</span><br><span class="line">   c = getopt_long(argc, argv, &quot;abc:d:012&quot;,</span><br><span class="line">   long_options, &amp;option_index);</span><br><span class="line">   if (c == -1)</span><br><span class="line">   break;</span><br><span class="line"> </span><br><span class="line">   switch (c) &#123;</span><br><span class="line">   case 0: /* 匹配到长选项时，返回的val，即struct optaion 中的 val，这里为 0 则表示匹配到 add、append, delete, verbose, file时都会跟到这个 case, 而create 则匹配到字符&#x27;c&#x27;*/</span><br><span class="line">printf(&quot;get option_index = %d, option %s&quot;, option_index, long_options[option_index].name);</span><br><span class="line">if (optarg)</span><br><span class="line">   printf(&quot; with arg %s&quot;, optarg);</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">break;</span><br><span class="line"> </span><br><span class="line">   case &#x27;0&#x27;:</span><br><span class="line">   case &#x27;1&#x27;:</span><br><span class="line">   case &#x27;2&#x27;:</span><br><span class="line">if (digit_optind != 0 &amp;&amp; digit_optind != this_option_optind)</span><br><span class="line"> printf(&quot;digits occur in two different argv-elements.\n&quot;);</span><br><span class="line">digit_optind = this_option_optind;</span><br><span class="line">printf(&quot;option %c\n&quot;, c);</span><br><span class="line">break;</span><br><span class="line"> </span><br><span class="line">   case &#x27;a&#x27;:</span><br><span class="line">printf(&quot;option a\n&quot;);</span><br><span class="line">break;</span><br><span class="line"> </span><br><span class="line">   case &#x27;b&#x27;:</span><br><span class="line">printf(&quot;option b\n&quot;);</span><br><span class="line">break;</span><br><span class="line"> </span><br><span class="line">   case &#x27;c&#x27;:</span><br><span class="line">printf(&quot;option c with value &#x27;%s&#x27;\n&quot;, optarg);</span><br><span class="line">break;</span><br><span class="line"> </span><br><span class="line">   case &#x27;d&#x27;:</span><br><span class="line">printf(&quot;option d with value &#x27;%s&#x27;\n&quot;, optarg);</span><br><span class="line">break;</span><br><span class="line"> </span><br><span class="line">   case &#x27;?&#x27;: /*ambiguous 模棱两可的时候返回? 如只输入 --a 则会匹配到 add 和 append*/</span><br><span class="line">printf(&quot;it&#x27;s ambiguous, please selete one\n&quot;);</span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">   default:</span><br><span class="line">printf(&quot;?? getopt returned character code 0%o ??\n&quot;, c);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">if (optind &lt; argc) &#123;</span><br><span class="line">printf(&quot;non-option ARGV-elements: &quot;);</span><br><span class="line">while (optind &lt; argc)</span><br><span class="line">   printf(&quot;%s &quot;, argv[optind++]);</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">exit(EXIT_SUCCESS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="fread和fwrite"><a href="#fread和fwrite" class="headerlink" title="fread和fwrite"></a>fread和fwrite</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">size_t fread(void *ptr, size_t size, size_t count, FILE *stream);</span><br></pre></td></tr></table></figure><pre><code>ptr：指向读取数据存储的缓冲区。size：每个数据项的字节数。count：要读取的数据项数。stream：文件指针，指向要读取数据的文件。</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">size_t fwrite(const void *ptr, size_t size, size_t count, FILE *stream);</span><br></pre></td></tr></table></figure><pre><code>ptr：要写入的数据的指针。size：每个数据项的字节数。count：要写入的数据项的个数。stream：要写入的文件指针。</code></pre><h2 id="sscanf"><a href="#sscanf" class="headerlink" title="sscanf"></a>sscanf</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int sscanf(const char* str, const char* format, ...);</span><br></pre></td></tr></table></figure><p>从<strong>字符串</strong>中按照指定的格式解析数据</p><pre><code>str：要解析的输入字符串。format：格式字符串，指定了要匹配的格式规则。...：可变参数列表，用于接收解析后的数据。</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">char str[20];</span><br><span class="line">sscanf(&quot;Hello, World!&quot;, &quot;%s&quot;, str);//解析字符串，把Hello, World!存到str</span><br></pre></td></tr></table></figure><h2 id="命令处理"><a href="#命令处理" class="headerlink" title="命令处理"></a>命令处理</h2><h4 id="strtok-r"><a href="#strtok-r" class="headerlink" title="strtok_r"></a>strtok_r</h4><p>首先需要将字符串切分为指令和参数形式，需要用到strtok_r函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">char *strtok_r(char * __restrict__ _Str, const char * __restrict__ _Delim, char ** __restrict__ __last);</span><br><span class="line">SS</span><br><span class="line">char *cmd;//表示命令</span><br><span class="line">char *paras;//表示命令后的参数</span><br><span class="line"> </span><br><span class="line">cmd = strtok_r(str, &quot;,&quot;, &amp;paras);</span><br><span class="line">printf(&quot;cmd:%srn&quot;, cmd);//获得字符串的第一串字符cmd:led</span><br><span class="line">printf(&quot;paras:%srn&quot;, paras);//获取后续字符串paras:100,0,80,15</span><br></pre></td></tr></table></figure><h4 id="strstr"><a href="#strstr" class="headerlink" title="strstr"></a>strstr</h4><p>对于得到参数指令字符串，我们可能还需要判断该指令是否有效，即计算机之前是否存储了该字符串，可以通过字符串匹配数组中对应字符串的方式来模拟这个测试。需要用到strstr函数，其函数定义为：<br>我们可以先自定义一个用来查询的字符串数组funname[5]，然后依次进行匹配比较。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    char *funname[5] = &#123;&quot;music&quot;, &quot;play&quot;, &quot;A_led1&quot;, &quot;led2&quot;, &quot;led&quot;&#125;;//自定义的函数名称列表</span><br><span class="line">     </span><br><span class="line">char *ret;</span><br><span class="line">int i;</span><br><span class="line">for (i = 0; i &lt; 5;i++)</span><br><span class="line">&#123;</span><br><span class="line">ret = strstr(funname[i], cmd);</span><br><span class="line">if(ret!=NULL)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;find cmd in funname[%d]rn&quot;, i);</span><br><span class="line">printf(&quot;ret:%srn&quot;, ret);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(i==5)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;can&#x27;t find cmd in funname[]&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><pre><code>find cmd in funname[2]ret:led1</code></pre><h4 id="strtok"><a href="#strtok" class="headerlink" title="strtok"></a>strtok</h4><p>确定了指令字符串的有效性，接下来就要切分后面的参数了，实际上我们还可以继续使用strtok_r方法，不过，我们可以使用另一个类似的函数strtok，它少一个用来保存切分后字符串的参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">char* para[4];</span><br><span class="line">para[0] = strtok(paras, &quot;,&quot;);</span><br><span class="line">int j= 1;</span><br><span class="line">while(paras != NULL)</span><br><span class="line">&#123;</span><br><span class="line">    para[j++] = strtok(NULL, &quot;,&quot;);</span><br><span class="line">    if(j==4)</span><br><span class="line">        break;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;para[0]:%srn&quot;, para[0]);</span><br><span class="line">printf(&quot;para[1]:%srn&quot;, para[1]);</span><br><span class="line">printf(&quot;para[2]:%srn&quot;, para[2]);</span><br><span class="line">printf(&quot;para[3]:%srn&quot;, para[3]);</span><br></pre></td></tr></table></figure><pre><code>第一次切割时，第一个参数（也就是str）不能是NULL第一次切割时，函数将找到str中第一个分割符，将它替换为\0同时strtok函数将保存这 个\0在整个字符串中的位置。第二次、第三次...第n次使用strtok函数切割同一个字符串时。第一个参数为NULL此时函数将从上一个保存的\0的位置开始往后切割，直到遇到下一个分割符或\0</code></pre><h4 id="atoi"><a href="#atoi" class="headerlink" title="atoi"></a>atoi</h4><p>上面分离的参数数字是字符串型，实际使用时可能需要其对应的整数形式，我们可以使用atoi函数进行转换:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int atoi(const char *_Str);</span><br></pre></td></tr></table></figure><pre><code>参数：数字形式的字符串返回值：对应的整形数值，若不能转换，返回0</code></pre><h2 id="strcmp-str1-str2"><a href="#strcmp-str1-str2" class="headerlink" title="strcmp(str1,str2)"></a>strcmp(str1,str2)</h2><p>若str1&#x3D;str2，则返回0<br>strcmp()函数首先将str1字符串的第一个字符的ACSII值减去str2第一个字符的ACSII值(自左向右逐个字符相比，直到出现不同的字符或遇’\0’为止)<br>若差值为零则继续比较下去；若差值不为零，则返回差值。</p><h2 id="struct-enum-union"><a href="#struct-enum-union" class="headerlink" title="struct,enum,union"></a>struct,enum,union</h2><p><a href="https://blog.csdn.net/qq_60192898/article/details/127602638">https://blog.csdn.net/qq_60192898/article/details/127602638</a></p><h2 id="fseek"><a href="#fseek" class="headerlink" title="fseek"></a>fseek</h2><p>fseek函数的原型定义在&lt;stdio.h&gt;头文件中，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int fseek(FILE *stream, long offset, int whence);</span><br></pre></td></tr></table></figure><p>stream：指向FILE对象的指针，代表一个打开的文件流。<br>offset：相对于whence参数指定的位置的偏移量，以字节为单位。根据whence的值，偏移量可以是正数也可以是负数。<br>whence：设置偏移量的起点。它通常是以下三个常量之一：<br>SEEK_SET：文件的开头。<br>SEEK_CUR：文件的当前位置。<br>SEEK_END：文件的末尾。<br>返回值<br>fseek函数将文件位置指示器移动到文件末尾（SEEK_END），偏移量为0。这是为了找出文件的总大小。<br>ftell函数返回当前文件位置指示器的位置，因为我们已经使用fseek移动到了文件末尾，</p><p>eg:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FILE *fp = fopen(img_file, &quot;rb&quot;);</span><br><span class="line">Assert(fp, &quot;Can not open &#x27;%s&#x27;&quot;, img_file);</span><br><span class="line"></span><br><span class="line">fseek(fp, 0, SEEK_END);</span><br><span class="line">long size = ftell(fp);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;1-getopt-long&quot;&gt;&lt;a href=&quot;#1-getopt-long&quot; class=&quot;headerlink&quot; title=&quot;1.getopt_long&quot;&gt;&lt;/a&gt;1.getopt_long&lt;/h2&gt;&lt;h4 </summary>
      
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="开发" scheme="http://example.com/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="C/C++" scheme="http://example.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>linux的常用命令</title>
    <link href="http://example.com/2024/02/02/linux%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2024/02/02/linux%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2024-02-02T07:17:23.000Z</published>
    <updated>2024-04-01T14:32:04.597Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="Linux根目录"><a href="#Linux根目录" class="headerlink" title="Linux根目录"></a>Linux根目录</h2><p>Linux根目录(<code>/</code>)是文件系统的最顶层目录，它包含了系统的所有其他文件和目录。每个位于根目录下的目录都有其特定的用途和约定。以下是Linux根目录下常见目录的简要说明：</p><h3 id="bin"><a href="#bin" class="headerlink" title="/bin"></a><code>/bin</code></h3><p>包含用户和系统操作所需的重要可执行文件（命令），如<code>ls</code>、<code>cp</code>等。这些命令对于系统的基本功能至关重要。</p><h3 id="boot"><a href="#boot" class="headerlink" title="/boot"></a><code>/boot</code></h3><p>存放启动Linux系统时使用的文件，包括Linux内核文件（通常是<code>vmlinuz</code>）、引导加载程序（如GRUB）的配置文件以及初始化RAM磁盘（initrd）。</p><h3 id="dev"><a href="#dev" class="headerlink" title="/dev"></a><code>/dev</code></h3><p>包含设备文件，这些文件代表系统中的硬件设备，允许程序和脚本与这些设备进行交互，如硬盘（<code>/dev/sda</code>）、终端（<code>/dev/tty</code>）等。</p><h3 id="etc"><a href="#etc" class="headerlink" title="/etc"></a><code>/etc</code></h3><p>存放系统全局配置文件，如启动脚本、网络配置文件以及各种服务和程序的配置文件。</p><h3 id="home"><a href="#home" class="headerlink" title="/home"></a><code>/home</code></h3><p>用户的主目录，通常每个用户在<code>/home</code>下有一个与其用户名同名的目录，用于存放个人文件、配置文件等。</p><h3 id="lib"><a href="#lib" class="headerlink" title="/lib"></a><code>/lib</code></h3><p>包含系统和应用程序运行所需的共享库文件和内核模块。共享库类似于Windows中的DLL文件。</p><h3 id="media和-mnt"><a href="#media和-mnt" class="headerlink" title="/media和/mnt"></a><code>/media</code>和<code>/mnt</code></h3><p><code>/media</code>通常用于挂载可移除媒体，如CD-ROMs、USB驱动器等，而<code>/mnt</code>经常被用作临时挂载文件系统的点。</p><h3 id="opt"><a href="#opt" class="headerlink" title="/opt"></a><code>/opt</code></h3><p>用于安装“可选”的软件和第三方应用程序，这些应用程序通常以包的形式独立于系统默认的软件管理。</p><h3 id="proc"><a href="#proc" class="headerlink" title="/proc"></a><code>/proc</code></h3><p>一个虚拟的文件系统，提供对内核和进程信息的接口，如系统内存、配置参数（通过文件系统接口访问）。</p><h3 id="root"><a href="#root" class="headerlink" title="/root"></a><code>/root</code></h3><p>超级用户（root用户）的主目录，类似于普通用户的<code>/home/用户名</code>目录，但位于根目录下。</p><h3 id="sbin"><a href="#sbin" class="headerlink" title="/sbin"></a><code>/sbin</code></h3><p>包含系统管理和维护的重要可执行文件，通常只有root用户才能运行这些命令，如<code>fdisk</code>、<code>ifconfig</code>等。</p><h3 id="srv"><a href="#srv" class="headerlink" title="/srv"></a><code>/srv</code></h3><p>用于存放一些服务启动之后需要的数据，这些服务直接提供给系统外部使用。</p><h3 id="sys"><a href="#sys" class="headerlink" title="/sys"></a><code>/sys</code></h3><p>像<code>/proc</code>一样，<code>/sys</code>也是一个虚拟的文件系统，提供了内核对象的接口，它允许内核和用户空间通信，以及配置内核。</p><h3 id="tmp"><a href="#tmp" class="headerlink" title="/tmp"></a><code>/tmp</code></h3><p>用于存放临时文件，任何用户都可以在此目录下创建和删除文件。系统可能在重启时清除此目录下的文件。</p><h3 id="usr"><a href="#usr" class="headerlink" title="/usr"></a><code>/usr</code></h3><p>包含用户级别的应用程序和文件，<code>/usr</code>目录下包含了许多子目录，如<code>/usr/bin</code>、<code>/usr/lib</code>、<code>/usr/local</code>等，用于存放非必需的应用程序、库文件、文档等。</p><h3 id="var"><a href="#var" class="headerlink" title="/var"></a><code>/var</code></h3><p>用于存放经常变化的文件，如日志文件（<code>/var/log</code>）、包和数据库文件（<code>/var/lib</code>）、临时电子邮件文件（<code>/var/mail</code>）等。</p><p>这些目录构成了Linux文件系统的标准布局，不同的发行版可能会有轻微的变化或扩展。</p><h2 id="重启网络（显示wifi图标）"><a href="#重启网络（显示wifi图标）" class="headerlink" title="重启网络（显示wifi图标）"></a>重启网络（显示wifi图标）</h2><p>$ 192.168.79.133<br>$ 192.168.79.133</p><p>$ sudo nmcli network on</p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p>查找特定名称的文件：<br>$ find &#x2F;path&#x2F;to&#x2F;search -name “filename.txt”<br>文件：<br>-type f<br>30天内被修改过<br>-mtime -30<br>处理深度：<br>可以通过-maxdepth和-mindepth选项控制搜索的深度。</p><h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><p>在文件中搜索文本：<br>$ grep “search pattern” filename</p><p>递归搜索目录中的所有文件：<br>$ grep -r “search pattern” &#x2F;path&#x2F;to&#x2F;search<br>忽略大小写地搜索文本:<br>-i<br>显示匹配行的行号：<br>-n</p><h2 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h2><p>-exec后面跟着要执行的命令，然后是{}，它代表当前处理的文件名，最后以;结束</p><p>查找名为config.php的文件，并使用chmod命令更改它们的权限：<br>$ find &#x2F;path&#x2F;to&#x2F;search -type f -name “config.php” -exec chmod 644 {} ;</p><p>使用;来终结-exec命令是必须的，因为没有它，find命令就不知道-exec选项的参数在哪里结束。</p><h2 id=""><a href="#" class="headerlink" title="|"></a>|</h2><p>管道（|）是一个Shell特性，它允许你将一个命令的输出作为另一个命令的输入。与-exec不同，管道通常与xargs命令一起使用，xargs可以将标准输入（stdin）转换为命令行参数。</p><p>xargs主要用于将标准输入数据转换为命令行参数。在你的场景中，由于grep可以直接从标准输入读取数据进行搜索，实际上不需要xargs来实现这一功能。<br>qemu-system-riscv64 -help | grep “machine”</p><p>查找当前目录及子目录下所有.log文件，并使用grep命令在它们中搜索”error”字符串：<br>$ find . -type f -name “*.log” | xargs grep “error”<br>xargs命令的-0（或–null）选项期望输入项以null字符（\0）分隔，这通常与find … -print0命令一起使用。</p><p>性能：使用-exec时，find会为每个找到的文件启动一个新的进程来执行指定的命令。而管道到xargs的方式会尝试减少进程的数量，通过将多个文件名作为单个命令的参数来提高效率。<br>安全性：-exec直接由find处理，可以安全地处理文件名中的特殊字符。而使用管道到xargs时，如果不加-0选项（并且find使用-print0），可能会遇到文件名中包含空格、换行符等特殊字符的问题。<br>灵活性：管道允许你利用Shell的特性组合多个命令，可以实现更复杂的处理流程。<br>选择使用-exec还是管道（配合xargs），取决于具体的任务需求、对性能的考量以及对特殊文件名的处理需求。</p><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>查看所有Git配置项：<br>$ git config –list<br>user.name&#x3D;LuLuji04<br>user.email&#x3D;<a href="mailto:&#x6c;&#105;&#x75;&#121;&#117;&#106;&#105;&#48;&#x31;&#48;&#64;&#49;&#50;&#x36;&#46;&#99;&#x6f;&#109;">&#x6c;&#105;&#x75;&#121;&#117;&#106;&#105;&#48;&#x31;&#48;&#64;&#49;&#50;&#x36;&#46;&#99;&#x6f;&#109;</a><br>https.proxy&#x3D;192.168.3.11:7890<br>credential.helper&#x3D;store<br>http.proxy&#x3D;192.168.3.11:7890<br>core.editor&#x3D;vim<br>color.ui&#x3D;true</p><p>查看特定配置项的值，如user.name：<br>$ git config user.name</p><p>$ git config –global user.name “Your Name”<br>$ git config –global user.email “<a href="mailto:&#x79;&#111;&#117;&#x72;&#x65;&#x6d;&#x61;&#105;&#x6c;&#x40;&#101;&#120;&#x61;&#109;&#x70;&#x6c;&#x65;&#46;&#x63;&#111;&#109;">&#x79;&#111;&#117;&#x72;&#x65;&#x6d;&#x61;&#105;&#x6c;&#x40;&#101;&#120;&#x61;&#109;&#x70;&#x6c;&#x65;&#46;&#x63;&#111;&#109;</a>“</p><h2 id="man"><a href="#man" class="headerlink" title="man"></a>man</h2><p>man 手册的数字编号</p><p>man 1 kill、man 2 kill，这些命令都是查看 kill 命令的手册，但是文档却大不相同。</p><p>因为 kill 是一个命令行的工具，which kill 看到 &#x2F;usr&#x2F;bin&#x2F;kill 是一个二进制文件；其实，也有一个系统调用叫做 kill。</p><p>man 1 kill 显示的是命令行工具 kill 的手册；</p><p>man 2 kill 显示系统调用 kill 的手册；</p><p>显示什么类型的手册，由 man 和命令中间的数字决定，目前共有 9 个 man 支持的数字。<br>数字说明<br>1可执行程序或 Shell 命令<br>2系统调用（内核提供的函数）<br>3库调用<br>4特殊文件（通常位于 &#x2F;dev 目录）<br>5文件格式和约定（比如 &#x2F;etc&#x2F;passwd）<br>6游戏<br>7杂项（包和一些约定）Miscellaneous (including macro packages and conventions), e.g. man(7), groff(7)<br>8系统管理命令（通常是 root 用户执行的命令）<br>9内核相关的文件 Kernel routines [Non standard]</p><p>@&#x2F;bin&#x2F;echo -e “NAME &#x3D; $*\nSRCS &#x3D; $&lt;\ninclude $${AM_HOME}&#x2F;Makefile” &gt; $@:</p><p>这一行创建了一个新的Makefile，其中包含了被规则匹配的测试文件的名称（$*，表示不带前缀的目标名称）和路径（$&lt;，表示规则的第一个依赖）。<br>$${AM_HOME}是环境变量AM_HOME的引用，这里使用两个$是为了在Makefile中延迟变量的扩展。<br>输出重定向到$@，即目标文件Makefile.<name>。</p><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><p>@if make -s -f $@ ARCH&#x3D;$(ARCH) $(MAKECMDGOALS); then <br>        printf “[%14s] $(COLOR_GREEN)PASS!$(COLOR_NONE)\n” $* &gt;&gt; $(RESULT); <br>    else <br>        printf “[%14s] $(COLOR_RED)FAIL!$(COLOR_NONE)\n” $* &gt;&gt; $(RESULT); <br>    fi<br>这里使用make命令来执行刚刚生成的Makefile（-f $@），传递ARCH变量和当前的目标（$(MAKECMDGOALS)）。<br>-s选项使make在执行时不打印命令，只显示错误和警告。</p><h2 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h2><p>这段代码是在 Makefile 中使用的，它的目的是根据 <code>ARCH</code> 变量的值生成一个编译器的预处理器定义。让我们逐步解析它的含义：</p><ul><li><code>$(shell command)</code>：Makefile 中的 <code>shell</code> 函数执行一个 shell 命令，并返回命令的输出。在这个上下文中，它执行了两次 <code>tr</code> 命令。</li><li><code>echo $(ARCH)</code>：输出 <code>ARCH</code> 变量的值。<code>ARCH</code> 是一个常见的环境变量，用于指示目标架构类型，如 <code>x86</code>、<code>arm</code> 等。</li><li><code>tr a-z A-Z</code>：将小写字母转换为大写字母。这意味着如果 <code>ARCH</code> 是小写的（如 <code>x86</code>），它会被转换为大写的（<code>X86</code>）。</li><li><code>tr - _</code>：将短划线（<code>-</code>）转换为下划线（<code>_</code>）。这是因为在C预处理器定义中，短划线不是一个有效的字符。</li></ul><p>将这些组合起来：</p><ul><li><code>-D__ARCH_$(shell echo $(ARCH) | tr a-z A-Z | tr - _)</code></li></ul><p>这将创建一个预处理器定义，其名称基于 <code>ARCH</code> 环境变量的值，但所有的小写字母都被转换成了大写，所有的短划线都被转换成了下划线，前缀为 <code>__ARCH_</code>。例如，如果 <code>ARCH=x86-64</code>，这个定义将会是 <code>-D__ARCH_X86_64</code>。</p><p>这样的预处理器定义可以在编译时提供目标架构的信息，使得源代码可以根据不同的架构进行条件编译。这是在跨平台开发中常见的做法，特别是在需要根据不同硬件架构调整编译选项和优化的情况下。</p><h2 id="grep-1"><a href="#grep-1" class="headerlink" title="grep"></a>grep</h2><p>grep -rnw ‘&#x2F;path&#x2F;to&#x2F;somewhere&#x2F;‘ -e ‘function_name’<br>这个命令会在指定路径</p><h2 id="用户管理基本操作"><a href="#用户管理基本操作" class="headerlink" title="用户管理基本操作"></a>用户管理基本操作</h2><p>以下是一些基本的用户管理操作：</p><h4 id="1-修改用户信息"><a href="#1-修改用户信息" class="headerlink" title="1. 修改用户信息"></a>1. 修改用户信息</h4><p>如果需要修改用户的信息（比如更改家目录、登录Shell等），可以使用 <code>usermod</code> 命令。例如，更改用户的Shell为 <code>/bin/zsh</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -s /bin/zsh userl</span><br></pre></td></tr></table></figure><h4 id="2-更改密码"><a href="#2-更改密码" class="headerlink" title="2. 更改密码"></a>2. 更改密码</h4><p>更改用户密码，可以使用 <code>passwd</code> 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd userl</span><br></pre></td></tr></table></figure><p>然后按照提示输入新密码。</p><h4 id="3-删除用户"><a href="#3-删除用户" class="headerlink" title="3. 删除用户"></a>3. 删除用户</h4><p>如果要删除用户，可以使用 <code>userdel</code> 命令。如果同时想删除用户的家目录，可以添加 <code>-r</code> 选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo userdel -r userl</span><br></pre></td></tr></table></figure><h4 id="4-用户组管理"><a href="#4-用户组管理" class="headerlink" title="4. 用户组管理"></a>4. 用户组管理</h4><ul><li><p><strong>添加用户到组</strong>：使用 <code>usermod -aG</code> 命令将用户添加到一个或多个附加组中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG groupname userl</span><br></pre></td></tr></table></figure></li><li><p><strong>创建新组</strong>：使用 <code>groupadd</code> 命令创建新组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd groupname</span><br></pre></td></tr></table></figure></li><li><p><strong>删除组</strong>：使用 <code>groupdel</code> 命令删除现有组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo groupdel groupname</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-查看用户信息"><a href="#5-查看用户信息" class="headerlink" title="5. 查看用户信息"></a>5. 查看用户信息</h4><ul><li><p>查看用户的当前设置，包括用户ID、组ID、家目录等，可以使用 <code>id</code> 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">id</span> userl</span><br></pre></td></tr></table></figure></li><li><p>查看系统中所有用户的列表，可以查看 <code>/etc/passwd</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/passwd</span><br></pre></td></tr></table></figure></li><li><p>查看所有组的列表，可以查看 <code>/etc/group</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/group</span><br></pre></td></tr></table></figure></li></ul><p>用户管理是Linux系统管理中的一个重要部分，了解和掌握基本的用户和组管理命令对于维护系统的安全性和有效性至关重要。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;Linux根目录&quot;&gt;&lt;a href=&quot;#Linux根目录&quot; class=&quot;headerlink&quot; title=&quot;Linux根目录&quot;&gt;&lt;/a&gt;Linux根目录&lt;/h2&gt;&lt;p&gt;Linux根目录(&lt;code&gt;/&lt;/cod</summary>
      
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="开发" scheme="http://example.com/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>配置vivado</title>
    <link href="http://example.com/2023/12/26/%E9%85%8D%E7%BD%AEvivado/"/>
    <id>http://example.com/2023/12/26/%E9%85%8D%E7%BD%AEvivado/</id>
    <published>2023-12-26T08:07:25.000Z</published>
    <updated>2024-02-10T16:36:55.766Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="VSCode关联VIVADO编辑Verilog"><a href="#VSCode关联VIVADO编辑Verilog" class="headerlink" title="VSCode关联VIVADO编辑Verilog"></a>VSCode关联VIVADO编辑Verilog</h2><p><a href="https://blog.csdn.net/wd12306/article/details/128929552">https://blog.csdn.net/wd12306/article/details/128929552</a></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>导入的文件可以不在{projectdir}\newcounter\newcounter.srcs中，<br><img src="/../images/%E9%85%8D%E7%BD%AEvivado/image.png" alt="Alt text"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;VSCode关联VIVADO编辑Verilog&quot;&gt;&lt;a href=&quot;#VSCode关联VIVADO编辑Verilog&quot; class=&quot;headerlink&quot; title=&quot;VSCode关联VIVADO编辑Veril</summary>
      
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="开发" scheme="http://example.com/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="硬件" scheme="http://example.com/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>一生一芯相关资料</title>
    <link href="http://example.com/2023/12/09/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/"/>
    <id>http://example.com/2023/12/09/%E4%B8%80%E7%94%9F%E4%B8%80%E8%8A%AF%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/</id>
    <published>2023-12-09T06:21:09.000Z</published>
    <updated>2024-02-02T07:28:16.105Z</updated>
    
    <content type="html"><![CDATA[<p>准备寒假有空研究一下</p><span id="more"></span><h2 id="报名参与"><a href="#报名参与" class="headerlink" title="报名参与"></a>报名参与</h2><p><a href="https://ysyx.oscc.cc/signup/">https://ysyx.oscc.cc/signup/</a><br>填写问卷-&gt;进入课程群-&gt;预学习-&gt;申请答辩-&gt;获得专属学号-&gt;.etc</p><h2 id="深圳理工训练营"><a href="#深圳理工训练营" class="headerlink" title="深圳理工训练营"></a>深圳理工训练营</h2><p><a href="https://tqdy06h5fq.feishu.cn/wiki/OWagweHaoiEYKWkCKEAcuMW6nMd">https://tqdy06h5fq.feishu.cn/wiki/OWagweHaoiEYKWkCKEAcuMW6nMd</a></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;准备寒假有空研究一下&lt;/p&gt;</summary>
    
    
    
    <category term="综述" scheme="http://example.com/categories/%E7%BB%BC%E8%BF%B0/"/>
    
    
    <category term="开发" scheme="http://example.com/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="硬件" scheme="http://example.com/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>人工智能</title>
    <link href="http://example.com/2023/12/08/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    <id>http://example.com/2023/12/08/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/</id>
    <published>2023-12-08T10:11:10.000Z</published>
    <updated>2023-12-24T08:49:54.867Z</updated>
    
    <content type="html"><![CDATA[<p>为应付期末人工智能论文，记录一下有用的网站，以防忘记</p><span id="more"></span><h2 id="1-大模型网站"><a href="#1-大模型网站" class="headerlink" title="1.大模型网站"></a>1.大模型网站</h2><h4 id="ChatGPT"><a href="#ChatGPT" class="headerlink" title="ChatGPT"></a>ChatGPT</h4><p><a href="https://chat.openai.com/">https://chat.openai.com/</a><br><a href="https://openai.com/">https://openai.com/</a></p><h4 id="文心一言"><a href="#文心一言" class="headerlink" title="文心一言"></a>文心一言</h4><p><a href="https://yiyan.baidu.com/">https://yiyan.baidu.com/</a><br>飞桨AI(调用文心一言)<br><a href="https://aistudio.baidu.com/cooperate/erniebotsdk">https://aistudio.baidu.com/cooperate/erniebotsdk</a></p><h4 id="智谱AI"><a href="#智谱AI" class="headerlink" title="智谱AI"></a>智谱AI</h4><p><a href="https://open.bigmodel.cn/">https://open.bigmodel.cn/</a></p><h4 id="星火大模型"><a href="#星火大模型" class="headerlink" title="星火大模型"></a>星火大模型</h4><p><a href="https://xinghuo.xfyun.cn/">https://xinghuo.xfyun.cn/</a></p><h2 id="2-调用API-python"><a href="#2-调用API-python" class="headerlink" title="2.调用API(python)"></a>2.调用API(python)</h2><h4 id="用飞桨AI调用文心大模型"><a href="#用飞桨AI调用文心大模型" class="headerlink" title="用飞桨AI调用文心大模型"></a>用飞桨AI调用文心大模型</h4><p><a href="https://zhuanlan.zhihu.com/p/661241466">https://zhuanlan.zhihu.com/p/661241466</a></p><h4 id="智谱AI官方调用文档"><a href="#智谱AI官方调用文档" class="headerlink" title="智谱AI官方调用文档"></a>智谱AI官方调用文档</h4><p><a href="https://open.bigmodel.cn/dev/api#chatglm_turbo">https://open.bigmodel.cn/dev/api#chatglm_turbo</a></p><h4 id="星火大模型-1"><a href="#星火大模型-1" class="headerlink" title="星火大模型"></a>星火大模型</h4><p><a href="https://zhuanlan.zhihu.com/p/671067886">https://zhuanlan.zhihu.com/p/671067886</a></p><h2 id="3-prompt"><a href="#3-prompt" class="headerlink" title="3.prompt"></a>3.prompt</h2><h4 id="大模型时代的科研基础之：Prompt-Engineering"><a href="#大模型时代的科研基础之：Prompt-Engineering" class="headerlink" title="大模型时代的科研基础之：Prompt Engineering"></a>大模型时代的科研基础之：Prompt Engineering</h4><iframe src="//player.bilibili.com/player.html?aid=313877142&bvid=BV13P41197c6&cid=1137176592&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>可以当作研究过程写进论文<h2 id="4-评估模型好坏的方法"><a href="#4-评估模型好坏的方法" class="headerlink" title="4.评估模型好坏的方法"></a>4.评估模型好坏的方法</h2><h4 id="干货分享！如何评估-大型语言模型（LLMs）的输出质量？评估方法大盘点！"><a href="#干货分享！如何评估-大型语言模型（LLMs）的输出质量？评估方法大盘点！" class="headerlink" title="干货分享！如何评估 大型语言模型（LLMs）的输出质量？评估方法大盘点！"></a>干货分享！如何评估 大型语言模型（LLMs）的输出质量？评估方法大盘点！</h4><p><a href="https://zhuanlan.zhihu.com/p/660777460">https://zhuanlan.zhihu.com/p/660777460</a></p><h4 id="【Mo-人工智能技术博客】联邦学习鲁棒性及相关论文分享"><a href="#【Mo-人工智能技术博客】联邦学习鲁棒性及相关论文分享" class="headerlink" title="【Mo 人工智能技术博客】联邦学习鲁棒性及相关论文分享"></a>【Mo 人工智能技术博客】联邦学习鲁棒性及相关论文分享</h4><p><a href="https://zhuanlan.zhihu.com/p/337048283">https://zhuanlan.zhihu.com/p/337048283</a></p><h4 id="《大模型时代的科研》之2-Prompt-Engineering-提示词工程"><a href="#《大模型时代的科研》之2-Prompt-Engineering-提示词工程" class="headerlink" title="《大模型时代的科研》之2: Prompt Engineering (提示词工程)"></a>《大模型时代的科研》之2: Prompt Engineering (提示词工程)</h4><p>这个是在讲怎么构造好的prompt,与本次论文关系不大<br><a href="https://zhuanlan.zhihu.com/p/631922240">https://zhuanlan.zhihu.com/p/631922240</a></p><h4 id="大模型鲁棒不鲁棒，PromptBench测一测-首个大语言模型提示鲁棒性的评测基准PromptBench"><a href="#大模型鲁棒不鲁棒，PromptBench测一测-首个大语言模型提示鲁棒性的评测基准PromptBench" class="headerlink" title="大模型鲁棒不鲁棒，PromptBench测一测: 首个大语言模型提示鲁棒性的评测基准PromptBench"></a>大模型鲁棒不鲁棒，PromptBench测一测: 首个大语言模型提示鲁棒性的评测基准PromptBench</h4><p><a href="https://zhuanlan.zhihu.com/p/637219127">https://zhuanlan.zhihu.com/p/637219127</a></p><h2 id="5-debug"><a href="#5-debug" class="headerlink" title="5.debug"></a>5.debug</h2><h4 id="python文件名不能与包名重复"><a href="#python文件名不能与包名重复" class="headerlink" title="python文件名不能与包名重复"></a>python文件名不能与包名重复</h4><p><a href="https://blog.csdn.net/long_songs/article/details/129070598">https://blog.csdn.net/long_songs/article/details/129070598</a></p><h4 id="windows中为终端设置代理"><a href="#windows中为终端设置代理" class="headerlink" title="windows中为终端设置代理"></a>windows中为终端设置代理</h4><p><a href="https://blog.csdn.net/qq_43651168/article/details/131074308">https://blog.csdn.net/qq_43651168/article/details/131074308</a></p><h4 id="python同步遍历两个列表"><a href="#python同步遍历两个列表" class="headerlink" title="python同步遍历两个列表"></a>python同步遍历两个列表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for prompt, reference in zip(test_accuarcy_cases, test_accuarcy_reference):</span><br><span class="line">#balbala</span><br><span class="line">#</span><br></pre></td></tr></table></figure><h2 id="6-短信接收"><a href="#6-短信接收" class="headerlink" title="6.短信接收"></a>6.短信接收</h2><p><a href="https://sms-activate.org/cn">https://sms-activate.org/cn</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;为应付期末人工智能论文，记录一下有用的网站，以防忘记&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="开发" scheme="http://example.com/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="ai" scheme="http://example.com/tags/ai/"/>
    
  </entry>
  
  <entry>
    <title>riscv的学习</title>
    <link href="http://example.com/2023/12/07/riscv%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2023/12/07/riscv%E7%9A%84%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-12-07T08:08:04.000Z</published>
    <updated>2024-02-25T03:49:56.754Z</updated>
    
    <content type="html"><![CDATA[<p>RISC-V是由伯克利大学开发的一款开源架构，作为对课内的补充，在此记录学习过程</p><span id="more"></span><h2 id="1-完结-循序渐进，学习开发一个RISC-V上的操作系统-汪辰-2021春"><a href="#1-完结-循序渐进，学习开发一个RISC-V上的操作系统-汪辰-2021春" class="headerlink" title="1.[完结] 循序渐进，学习开发一个RISC-V上的操作系统 - 汪辰 - 2021春"></a>1.[完结] 循序渐进，学习开发一个RISC-V上的操作系统 - 汪辰 - 2021春</h2><iframe src="//player.bilibili.com/player.html?aid=459886905&bvid=BV1Q5411w7z5&cid=319792271&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h2 id="2-笔记"><a href="#2-笔记" class="headerlink" title="2.笔记"></a>2.笔记</h2><h4 id="安全中断（riscv架构）"><a href="#安全中断（riscv架构）" class="headerlink" title="安全中断（riscv架构）"></a>安全中断（riscv架构）</h4><p><a href="https://zhuanlan.zhihu.com/p/669734854">https://zhuanlan.zhihu.com/p/669734854</a></p><h4 id="安全相关论文"><a href="#安全相关论文" class="headerlink" title="安全相关论文"></a>安全相关论文</h4><p><a href="https://s.wanfangdata.com.cn/patent?q=%E5%8F%91%E6%98%8E%E4%BA%BA/%E8%AE%BE%E8%AE%A1%E4%BA%BA:%22%E5%A4%8F%E8%99%9E%E6%96%8C%22&p=1">https://s.wanfangdata.com.cn/patent?q=%E5%8F%91%E6%98%8E%E4%BA%BA%2F%E8%AE%BE%E8%AE%A1%E4%BA%BA%3A%22%E5%A4%8F%E8%99%9E%E6%96%8C%22&amp;p=1</a></p><h4 id="标准扩展"><a href="#标准扩展" class="headerlink" title="标准扩展"></a>标准扩展</h4><p>RISC-V指令集架构（ISA）是模块化的，由基础整数指令集（如RV32I、RV64I）和一系列可选的扩展组成。这些扩展使得RISC-V能够灵活地适应不同的应用需求，从简单的嵌入式设备到复杂的服务器系统。截至我最后更新的信息（2023年4月），以下是RISC-V常见的一些扩展：</p><p>标准扩展<br>I - 基本整数指令集<br>M - 整数乘法和除法扩展，为整数算术提供乘法、除法和取模运算指令。<br>A - 原子指令扩展，支持原子内存访问操作，用于构建多线程和并发程序。<br>F - 单精度浮点扩展，提供32位单精度浮点运算指令。<br>D - 双精度浮点扩展，提供64位双精度浮点运算指令。<br>C - 压缩指令扩展，提供更短的指令格式，以减小代码大小和提高性能。<br>G - 通用扩展，一个便捷的缩写，包含了I、M、A、F、D和C扩展，适用于需要通用计算能力的应用。<br>Q - 四精度浮点扩展，提供128位四精度浮点运算指令。<br>H - 表示半精度浮点指令。<br>L - 十进制浮点扩展，提供十进制浮点运算指令。<br>B - 位操作扩展，提供位操作和位字段操作指令，用于提高位操作的效率。<br>J - 动态跳转扩展，提供更灵活的跳转和分支指令。<br>T - 事务内存扩展，提供硬件事务内存支持，用于改进并发程序的性能和简化并发控制。<br>P - DSP扩展，提供数字信号处理（DSP）相关指令，优化多媒体处理等应用。<br>V - 向量扩展，为数据并行计算提供支持，通过向量操作指令优化大规模数据处理性能。<br>特殊扩展<br>Z系列扩展，为特定的功能或用途定义的细粒度扩展。例如：<br>Zifencei - 指令流水线栅栏指令扩展，用于同步指令和数据流水线。<br>Zmmul - 仅包含乘法指令的整数乘法扩展子集。<br>Zicsr - 控制和状态寄存器（CSR）指令扩展，为访问CSR提供指令。<br>注意</p><p>ilp32&#x2F;lp64<br>i：int类型为32位。<br>l：long类型为32位。<br>p：指针类型为32位。</p><p>ilp32d和lp64d：在ilp32和lp64的基础上增加了对双精度浮点数的支持。<br>ilp32f和lp64f：在ilp32和lp64的基础上增加了对单精度浮点数的支持。</p><p>eg<br>COMMON_CFLAGS +&#x3D; -march&#x3D;rv32im -mabi&#x3D;ilp32   # overwrite<br>这样的设置指示编译器生成适用于具有整数、乘法和除法指令集的RISC-V 32位架构的代码，使用ilp32ABI，其中整数、长整型和指针都是32位的。</p><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><h6 id="riscv64-linux-gnu-gcc-g"><a href="#riscv64-linux-gnu-gcc-g" class="headerlink" title="riscv64-linux-gnu-gcc&#x2F;-g++"></a>riscv64-linux-gnu-gcc&#x2F;-g++</h6><p>目标环境：它生成的代码是为了在支持Linux的RISC-V 64位系统上运行。<br>命名解释：<br>linux-gnu：表示目标操作系统是Linux，使用GNU的libc（glibc）。<br>适用场景：开发Linux应用程序或者在RISC-V 64位Linux系统上运行的任何软件。<br>Installation (glib)<br>.&#x2F;configure –prefix&#x3D;&#x2F;opt&#x2F;riscv<br>make linux</p><h6 id="riscv64-unknown-elf-gcc-g"><a href="#riscv64-unknown-elf-gcc-g" class="headerlink" title="riscv64-unknown-elf-gcc&#x2F;-g++"></a>riscv64-unknown-elf-gcc&#x2F;-g++</h6><p>目标环境：它生成的代码适用于没有标准操作系统支持的环境，如嵌入式系统或特定的硬件。<br>unknown-elf：表示目标环境是未知的，通常用于裸机或特定的运行时环境，使用ELF（Executable and Linkable Format）作为二进制格式。<br>适用场景：开发嵌入式系统、固件、或需要直接与硬件交互的程序</p><p>Installation (Newlib)<br>.&#x2F;configure –prefix&#x3D;&#x2F;opt&#x2F;riscv #指定安装路径。rm -rf &#x2F;opt&#x2F;riscv<br>make</p><h6 id="riscv64-unknown-linux-gnu-gcc"><a href="#riscv64-unknown-linux-gnu-gcc" class="headerlink" title="riscv64-unknown-linux-gnu-gcc"></a>riscv64-unknown-linux-gnu-gcc</h6><p>目标系统：与riscv64-linux-gnu-gcc相同，也是面向运行Linux的RISC-V 64位架构。<br>“unknown”：unknown部分通常是目标三元组（target triple）中的供应商字段。在这里，unknown表示没有特定的供应商信息。这是交叉编译工具链的常见约定，用于表示工具链是针对通用或未指定供应商的目标系统。<br>GNU前缀：同样表示目标系统使用GNU的libc。<br>用途：用途与riscv64-linux-gnu-gcc相同，用于编译能在RISC-V 64位Linux系统上运行的程序。</p><p>g++：表示这是GCC的C++编译器。</p><p>$ riscv64-linux-gnu-gcc –help<br>  –help                   Display this information.<br>  –target-help            Display target specific command line options.<br>  –help&#x3D;{common|optimizers|params|target|warnings|[^]{joined|separate|undocumented}}[,…].<br>                           Display specific types of command line options</p><p>这些列出的工具都是RISC-V工具链的一部分，专门用于RISC-V架构的嵌入式开发。这个工具链提供了从代码编译到程序调试所需的全部工具。下面是对每个工具的简要说明：</p><h2 id="编译和链接工具"><a href="#编译和链接工具" class="headerlink" title="编译和链接工具"></a>编译和链接工具</h2><ul><li><strong>riscv64-unknown-elf-gcc</strong>: GNU C 编译器，用于编译C语言源文件。</li><li><strong>riscv64-unknown-elf-g++ &#x2F; riscv64-unknown-elf-c++</strong>: GNU C++ 编译器，用于编译C++语言源文件。</li><li><strong>riscv64-unknown-elf-as</strong>: 汇编器，用于将汇编语言源文件转换为机器代码。</li><li><strong>riscv64-unknown-elf-ld &#x2F; riscv64-unknown-elf-ld.bfd</strong>: 链接器，用于将多个对象文件和库文件链接成一个可执行文件或库文件。</li><li><strong>riscv64-unknown-elf-ar</strong>: 归档工具，用于创建、修改和提取静态库文件。</li><li><strong>riscv64-unknown-elf-ranlib</strong>: 生成静态库的索引，以提高链接时的查找速度。</li></ul><h3 id="调试和分析工具"><a href="#调试和分析工具" class="headerlink" title="调试和分析工具"></a>调试和分析工具</h3><ul><li><strong>riscv64-unknown-elf-gdb</strong>: GNU 调试器，用于调试程序。</li><li><strong>riscv64-unknown-elf-gprof</strong>: 性能分析工具，用于收集程序运行时的性能数据。</li><li><strong>riscv64-unknown-elf-addr2line</strong>: 将地址转换为文件名和行号，有助于调试。</li><li><strong>riscv64-unknown-elf-objdump</strong>: 显示二进制文件的信息，如反汇编输出。</li><li><strong>riscv64-unknown-elf-readelf</strong>: 显示ELF格式文件的信息。</li><li><strong>riscv64-unknown-elf-size</strong>: 显示目标文件或归档文件中各个部分的大小。</li><li><strong>riscv64-unknown-elf-strings</strong>: 从二进制文件中提取可打印的字符串。</li><li><strong>riscv64-unknown-elf-strip</strong>: 从目标文件中移除符号信息，减小文件大小。</li><li><strong>riscv64-unknown-elf-nm</strong>: 列出目标文件中的符号。</li><li><strong>riscv64-unknown-elf-objcopy</strong>: 复制和转换目标文件的格式。</li><li><strong>riscv64-unknown-elf-c++filt</strong>: 用于美化C++符号名称。</li></ul><h3 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h3><ul><li><strong>riscv64-unknown-elf-cpp</strong>: C预处理器。</li><li><strong>riscv64-unknown-elf-elfedit</strong>: 修改ELF文件的工具。</li><li><strong>riscv64-unknown-elf-gcc-ar &#x2F; riscv64-unknown-elf-gcc-nm &#x2F; riscv64-unknown-elf-gcc-ranlib</strong>: 这些是为了与LTO(Link Time Optimization，链接时优化)一起使用而特别设计的GCC工具。</li><li><strong>riscv64-unknown-elf-gcov &#x2F; riscv64-unknown-elf-gcov-dump &#x2F; riscv64-unknown-elf-gcov-tool</strong>: 覆盖率测试工具，用于分析程序的代码覆盖率。</li><li><strong>riscv64-unknown-elf-lto-dump</strong>: 用于检查LTO生成的中间文件。</li></ul><p>这些工具使得RISC-V嵌入式开发者能够编译、链接、调试和分析他们的代码，以及对生成的程序进行各种操作和优化。</p><h2 id="trap"><a href="#trap" class="headerlink" title="trap"></a>trap</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">trap-&gt;&#123;</span><br><span class="line">interupt-&gt;&#123;</span><br><span class="line">software interupt</span><br><span class="line">timer interupt (可用于抢占式多任务)</span><br><span class="line">external interupt</span><br><span class="line">&#125;</span><br><span class="line">exception-&gt;&#123;</span><br><span class="line">除零之类的</span><br><span class="line">ecall (可用于切换模式，执行M-mode指令)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RISC-V-安全拓展与可信执行-任老师"><a href="#RISC-V-安全拓展与可信执行-任老师" class="headerlink" title="RISC-V 安全拓展与可信执行 - 任老师"></a>RISC-V 安全拓展与可信执行 - 任老师</h2><iframe src="//player.bilibili.com/player.html?aid=274925919&bvid=BV1pF41117op&cid=1240016606&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>####  pmp页表 - s-modepmp生效于 s-mode,u-mode若无pmp，则s-mode可以访问任何内存<p>pmp（i）的i越小,优先级越高<br>TOR,NA4,NATOR</p><p>DMA<br><img src="/../images/riscv%E7%9A%84%E5%AD%A6%E4%B9%A0/image.png" alt="alt text"></p><h4 id="iopmp"><a href="#iopmp" class="headerlink" title="iopmp"></a>iopmp</h4><p>使用PMP（Physical Memory Protection）限制MMIO访问，可能会有overlapping 攻击</p><p>kernel ROP攻击:<br>SMAP,SMEP防护</p><p>covert channel:<br>mstateen (stable enable)</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;RISC-V是由伯克利大学开发的一款开源架构，作为对课内的补充，在此记录学习过程&lt;/p&gt;</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="riscv" scheme="http://example.com/tags/riscv/"/>
    
    <category term="安全" scheme="http://example.com/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>学习硬件安全的网站</title>
    <link href="http://example.com/2023/12/06/%E5%AD%A6%E4%B9%A0%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8%E7%9A%84%E7%BD%91%E7%AB%99/"/>
    <id>http://example.com/2023/12/06/%E5%AD%A6%E4%B9%A0%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8%E7%9A%84%E7%BD%91%E7%AB%99/</id>
    <published>2023-12-06T08:50:38.000Z</published>
    <updated>2023-12-10T13:15:47.603Z</updated>
    
    <content type="html"><![CDATA[<p>作为一名信息安全的学生，由于更喜欢与真实的世界打交道，选择了深入了解硬件安全。这里就将用来记录一些关于<em>硬件安全</em>的学习网站</p><span id="more"></span><h2 id="黑客平台"><a href="#黑客平台" class="headerlink" title="黑客平台"></a>黑客平台</h2><h4 id="包含多层面的安全技术，其中有IoT安全"><a href="#包含多层面的安全技术，其中有IoT安全" class="headerlink" title="包含多层面的安全技术，其中有IoT安全"></a>包含多层面的安全技术，其中有IoT安全</h4><p><a href="https://paper.seebug.org/">https://paper.seebug.org/</a></p><h2 id="keystone"><a href="#keystone" class="headerlink" title="keystone"></a>keystone</h2><h4 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h4><p><a href="http://docs.keystone-enclave.org/en/latest/">http://docs.keystone-enclave.org/en/latest/</a></p><h4 id="【TEE自学随笔】keystone代码略读"><a href="#【TEE自学随笔】keystone代码略读" class="headerlink" title="【TEE自学随笔】keystone代码略读"></a>【TEE自学随笔】keystone代码略读</h4><p><a href="https://blog.csdn.net/BOWS7RING/article/details/116906211?spm=1001.2014.3001.5502">https://blog.csdn.net/BOWS7RING/article/details/116906211?spm=1001.2014.3001.5502</a></p><h4 id="一文知悉RISC-V可信执行环境：Keystone"><a href="#一文知悉RISC-V可信执行环境：Keystone" class="headerlink" title="一文知悉RISC-V可信执行环境：Keystone"></a>一文知悉RISC-V可信执行环境：Keystone</h4><p><a href="https://blog.csdn.net/weixin_45264425/article/details/134326170">https://blog.csdn.net/weixin_45264425/article/details/134326170</a></p><h2 id="trustzone"><a href="#trustzone" class="headerlink" title="trustzone"></a>trustzone</h2><h4 id="ARM-A64架构TrustZone学习"><a href="#ARM-A64架构TrustZone学习" class="headerlink" title="ARM A64架构TrustZone学习"></a>ARM A64架构TrustZone学习</h4><p><a href="https://blog.csdn.net/pslyunhai3255/article/details/129229732">https://blog.csdn.net/pslyunhai3255/article/details/129229732</a></p><h2 id="侧信道攻击"><a href="#侧信道攻击" class="headerlink" title="侧信道攻击"></a>侧信道攻击</h2><h4 id="RISC-V-CPU侧信道攻击原理与实践"><a href="#RISC-V-CPU侧信道攻击原理与实践" class="headerlink" title="RISC-V CPU侧信道攻击原理与实践"></a>RISC-V CPU侧信道攻击原理与实践</h4><p><a href="https://www.zhihu.com/people/shawn-82-88-4">https://www.zhihu.com/people/shawn-82-88-4</a></p><h2 id="数字ic"><a href="#数字ic" class="headerlink" title="数字ic"></a>数字ic</h2><h4 id="手把手教你蜂鸟e203移植（以Nexys4DDR为例）"><a href="#手把手教你蜂鸟e203移植（以Nexys4DDR为例）" class="headerlink" title="手把手教你蜂鸟e203移植（以Nexys4DDR为例）"></a>手把手教你蜂鸟e203移植（以Nexys4DDR为例）</h4><p><a href="https://www.cnblogs.com/Qzzz/p/17201475.html">https://www.cnblogs.com/Qzzz/p/17201475.html</a></p><h4 id="数字IC基础学这些就够了"><a href="#数字IC基础学这些就够了" class="headerlink" title="数字IC基础学这些就够了"></a>数字IC基础学这些就够了</h4><p><a href="https://zhuanlan.zhihu.com/p/670736813">https://zhuanlan.zhihu.com/p/670736813</a></p><h4 id="国产安全芯片，请关注他们！"><a href="#国产安全芯片，请关注他们！" class="headerlink" title="国产安全芯片，请关注他们！"></a>国产安全芯片，请关注他们！</h4><p><a href="https://zhuanlan.zhihu.com/p/627643776">https://zhuanlan.zhihu.com/p/627643776</a></p><h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><h4 id="计算机体系结构学习路线"><a href="#计算机体系结构学习路线" class="headerlink" title="计算机体系结构学习路线"></a>计算机体系结构学习路线</h4><p><a href="https://zhuanlan.zhihu.com/p/654821469">https://zhuanlan.zhihu.com/p/654821469</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;作为一名信息安全的学生，由于更喜欢与真实的世界打交道，选择了深入了解硬件安全。这里就将用来记录一些关于&lt;em&gt;硬件安全&lt;/em&gt;的学习网站&lt;/p&gt;</summary>
    
    
    
    <category term="综述" scheme="http://example.com/categories/%E7%BB%BC%E8%BF%B0/"/>
    
    
    <category term="安全" scheme="http://example.com/tags/%E5%AE%89%E5%85%A8/"/>
    
    <category term="硬件" scheme="http://example.com/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>hexo+github搭网站</title>
    <link href="http://example.com/2023/12/06/hexo+github%E6%90%AD%E7%BD%91%E7%AB%99/"/>
    <id>http://example.com/2023/12/06/hexo+github%E6%90%AD%E7%BD%91%E7%AB%99/</id>
    <published>2023-12-06T08:20:38.000Z</published>
    <updated>2024-02-17T03:25:18.857Z</updated>
    
    <content type="html"><![CDATA[<p>由于心血来潮，决定自己搭网站。又所谓<em>拿来主义</em>，对于别人的好东西就要拿来，在此记录我参考过的网站</p><span id="more"></span><h2 id="手把手从0-1"><a href="#手把手从0-1" class="headerlink" title="手把手从0-1"></a>手把手从0-1</h2><p><a href="https://www.jianshu.com/p/85f455afcfcf">https://www.jianshu.com/p/85f455afcfcf</a></p><p>创建<br>$ hexo new post(default)&#x2F;draft&#x2F;page [文章名]<br>清除缓存<br>$ hexo clean<br>远端生效<br>$ hexo d -g</p><h2 id="使用主题next"><a href="#使用主题next" class="headerlink" title="使用主题next"></a>使用主题next</h2><p><a href="https://zhuanlan.zhihu.com/p/150737388">https://zhuanlan.zhihu.com/p/150737388</a></p><h2 id="RSS订阅功能"><a href="#RSS订阅功能" class="headerlink" title="RSS订阅功能"></a>RSS订阅功能</h2><p><a href="https://segmentfault.com/a/1190000012647294">https://segmentfault.com/a/1190000012647294</a></p><h2 id="Hexo博客Next主题bilibili视频Markdown插入文章"><a href="#Hexo博客Next主题bilibili视频Markdown插入文章" class="headerlink" title="Hexo博客Next主题bilibili视频Markdown插入文章"></a>Hexo博客Next主题bilibili视频Markdown插入文章</h2><p><a href="https://www.freesion.com/article/9552475946/">https://www.freesion.com/article/9552475946/</a></p><h2 id="HEXO-基本使用（讲解文章格式的）"><a href="#HEXO-基本使用（讲解文章格式的）" class="headerlink" title="HEXO 基本使用（讲解文章格式的）"></a>HEXO 基本使用（讲解文章格式的）</h2><p><a href="https://blog.csdn.net/xq151750111/article/details/133043466">https://blog.csdn.net/xq151750111/article/details/133043466</a></p><h2 id="Hexo教程，看这一篇就够了-How-to系列（有空研读一下）"><a href="#Hexo教程，看这一篇就够了-How-to系列（有空研读一下）" class="headerlink" title="Hexo教程，看这一篇就够了- How to系列（有空研读一下）"></a>Hexo教程，看这一篇就够了- How to系列（有空研读一下）</h2><p><a href="https://blog.csdn.net/cat_bayi/article/details/128725230">https://blog.csdn.net/cat_bayi/article/details/128725230</a></p><p><img src="/images/hexo+github%E6%90%AD%E7%BD%91%E7%AB%99/IMG_7006.JPG" alt="Alt text"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;由于心血来潮，决定自己搭网站。又所谓&lt;em&gt;拿来主义&lt;/em&gt;，对于别人的好东西就要拿来，在此记录我参考过的网站&lt;/p&gt;</summary>
    
    
    
    <category term="综述" scheme="http://example.com/categories/%E7%BB%BC%E8%BF%B0/"/>
    
    
    <category term="网络" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/12/06/hello-world/"/>
    <id>http://example.com/2023/12/06/hello-world/</id>
    <published>2023-12-06T08:12:12.874Z</published>
    <updated>2023-12-06T14:03:20.460Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
